// This is the ROOT of the output CSS file that is generated.

// Declare a namespace prefix for use in `sort-by:``
@namespace xhtml "http://www.w3.org/1999/xhtml";

@namespace cmlnle "http://katalysteducation.org/cmlnle/1.0";
@namespace cxlxt "http://katalysteducation.org/cxlxt/1.0";

//Currently, none of the books have composite chapters
//TODO: add a switch when our books have composite chapters, define logic/behavior for that switch. This simply could be in the _config files for all books or set based on the presence of at least one type of composite chapter (appendix, multiple page answer key etc.).


@mixin misc_webview_styling() {
  // Adapted from https://github.com/Connexions/webview/blob/master/src/scripts/modules/media/body/content-common.less#L341
  //   // Block-ish lists
  //   ul:not([data-display='inline'])          { @include list_style(block, bulleted); }
  //   ol:not([data-display='inline'])          { @include list_style(block, enumerated); }
  //   ul[data-labeled-item]                    { @include list_style(block, labeled-item); }
  //
  //   // Inline lists (with `data-display='inline'`)
  //   ul[data-display='inline']                { @include list_style(inline, bulleted); }
  //   ol[data-display='inline']                { @include list_style(inline, enumerated); }
  //   ul[data-display='inline'][data-labeled-item] { @include list_style(inline, labeled-item); }
  //
  //   // Lists inside a paragraph
  //   [data-type='list']:not([data-list-type]):not([data-labeled-item])
  //                                                     { @include list_style-emulated(inline, bulleted); }
  //   [data-type='list'][data-list-type='bulleted']     { @include list_style-emulated(inline, bulleted); }
  //   [data-type='list'][data-list-type='enumerated']   { @include list_style-emulated(inline, enumerated); }
  //   [data-type='list'][data-list-type='labeled-item'] { @include list_style-emulated(inline, labeled-item); }
  //   div[data-type='list'][data-list-type]             { padding-left: 2.5rem; margin-bottom: 1rem; }

  [data-type='list']:not([data-list-type]),
  [data-type='list'][data-list-type='bulleted'],
  [data-type='list'][data-list-type='enumerated'] {
    // Throw an erros just to make sure these cases do not occur
    sort-by: 'invalid-namespace-just-to-throw-an-error|element-HACK';
  }

  [data-type='list'][data-list-type='labeled-item'],
  [data-type='list'][data-list-type='bulleted'] {

    &:not([data-item-sep]) > span[data-type="item"]:not(:last-child)::after {
      // content: @default-inline-list-item-sep;
      container: span;
      attr-class: "-os-inline-list-separator";
      content: "; ";
    }
    &[data-item-sep] {
      // Squirrel away the separator character (if there is one)
      string-set: listItemSep attr(data-item-sep);

      > [data-type="item"]:not(:last-child)::after {
        // content: @default-inline-list-item-sep;
        // .x-not-implemented('data-item-sep=CUSTOM');
        container: span;
        attr-class: "-os-inline-list-separator";
        content: string(listItemSep);
      }
    }
  }
}


:pass(0) {
  //putting all unnecessary elements in the trash and emptying the trash
  //first step so that these elements are not counted
  @if $Config_TrashSelectedElements != () {
    @each $trash in $Config_TrashSelectedElements {
      @include modify_trash($trash);
    }
    @include utils_clearTrash();
  }
  
  //Some modifications to be done to the book before any collation
  @include misc_webview_styling();
  @if $Config_hasStimuli {
    @include modify_tagStimulusExercises();
  }
  @if $Config_PartType_CoreqSkills != () {
    @include modify_tagCoreqExercises();
    @include modify_tagCoreqElement('[data-type="example"]');
    @include modify_tagCoreqElement('figure');
    @include modify_tagCoreqElement('table');
  }
  @include modify_syncTitlesFromCollection();
}

:pass(1) {
  @if release-flag-enabled(subtitled-examples) {
    @include modify_examples();
  }
  @if release-flag-enabled(chapter-page-class) {
    @include modify_addChapterPageClass();
  }

  @include modify_titlePreface();
  @include modify_spanWrapTitles();
  @if $Config_Coverage_MayHaveSimlinks == true {
    @include modify_simLinkTarget();
  }
  @include modify_wrapExercises(); // no dependencies
  @include modify_wrapLists(); // no dependencies
  @if $Config_Coverage_MayHaveIframes == true {
    @include modify_wrapIframesWithAlternatives(); // no dependencies
  }

  @if $Config_hasHandbook {
    @include modify_spanWrapHeadbookTitles();
  }

  @include modify_trash("cnx-pi");

  // Only mark up solutions if they will not be discarded (optimization)
  @if map-get($Config_PartType_Solution, moveTo) == $AREA_TRASH {
  } @else if map-get($Config_PartType_Solution, moveTo) == $AREA_TRASH_HALF {
    @include utils_hasSolution($trashHalf: true);
  } @else {
    @include utils_hasSolution($trashHalf: false);
  }

  @if $Config_HACK_modifyAnyContainerTitleSelector {
    @include modify_anyContainerTitle($Config_HACK_modifyAnyContainerTitleSelector, null);
  }
  @include modify_GenericNote();

  //the metadata has been moved to the content, remove it from the metadata
  @include modify_trash('[data-type="metadata"] > [data-type="description"]');
  @if $Config_Coverage_MayHaveMissingExercises {
    @include modify_tagMissingExercises();
    @include modify_dataNumberStyle();
  }
  @if $Config_hasAbstract == false {
    @include modify_trash('[data-type="abstract"]');
  }
  @if $Config_abstractTitle {
    @include modify_addAbstractTitle($Config_abstractTitle);
  }
  @if $Config_hasReferenceInTerm == true {
    @include modify_prepGlossaryTerms();
  }
}
:pass(2) {
  @if $Config_Coverage_MayHaveMissingExercises {
    @include modify_trash('[data-type="exercise"].missing-exercise');
  }

  // Any notes that need to trash the solution
  @each $note in $Config_Notes {
    $className: map-get($note, className);
    $moveSolutionTo: map-get($note, moveSolutionTo);
    @include validate_type($className, string);
    @include validate_enumOptional($moveSolutionTo, $AREA__PREFIX__);

    @if $moveSolutionTo == $AREA_TRASH {
      @include modify_trash('.#{$className} [data-type="solution"]');
      @include utils_clearTrash();
    }
    // TODO Skip reconstructing a new object for modify_note
    $labelText: map-get($note, labelText);
    $titleContent: map-get($note, titleContent);
    $replaceHeader: map-get($note, replaceHeader);
    $useHeader: map-get($note, useHeader);
    @include validate_typeOptional($useHeader, bool);
    @include validate_typeOptional($labelText, string);
    @include validate_typeOptional($titleContent, map);

    // Check that there is not both a label AND a titleContent
    @if $labelText and $titleContent {
      @error "BUG: Specified both a label and a titleContent";
    } @else if $useHeader {
      @include modify_note((className: $className, useHeader: $useHeader));
    }
    @else if $labelText {
      @include modify_note((className: $className, labelText: $labelText, replaceHeader: $replaceHeader));
    } @else {
      @if $titleContent {
        @include modify_note((className: $className, titleContent: $titleContent, replaceHeader: $replaceHeader));
      }
    }
  }
  @if $Config_hasReferenceInTerm == true {
    @include modify_finishPreppingGlossaryTerms($Config_Index_NotSymbolRegexp, $Config_Index_SymbolRegexp);
  }
}
:pass(3) {

  //Come up with mixins for common numbering schemes as per Phil's suggestion
  @include count_countUnits(unit);
  @include number_numberUnits($Config_PartType_Unit_TitleContent);
  @include count_countChapters(chapter);
  @include number_numberChapters($Config_PartType_Chapter_TitleContent);
  @include count_countAppendices(appendix);
  @include number_numberAppendices($Config_PartType_Appendix_TitleContent);
  @include count_countSections(section);
  @include number_numberSections($Config_PartType_Section_TitleContent);

  @if $Config_hasHandbook {
    @include count_countHandbookSections(handbookSection);
    @include number_numberHandbookSections($Config_PartType_HandbookSection_TitleContent);
  }

  @if not release-flag-enabled(move-footnotes) {
    @include count_footnotes(footnotes);
    @include count_footnoteLinks(footnoteLinks);
    @include number_footnotes(footnotes, footnoteLinks);
  }

  @if ($Config_hasCitation) {
    @include count_citations(citation);
    @include count_citationsLinks(citationLink);
    @include number_citations(citation, citationLink);
  }
  @if ($Config_hasEndNotes) {
    @include count_endNotes(endNotes);
    @include count_endNotesLinks(endNotesLinks);
    @include number_endNotes(endNotes, endNotesLinks);
  }
  @if $Config_PartType_CoreqSkills != () {
    $titleContent:  map-get($Config_PartType_CoreqSkills, titleContent);

    @include modify_CoreqSkillsTitle($titleContent);
  }
  @if release-flag-enabled(subtitled-examples) {
    @include modify_exampleTitle();
  }
  // Count examples when moveTo: $AREA_NONE (no moving)
  @include validate_enumOptional(map-get($Config_PartType_Example, moveTo), $AREA__PREFIX__);
  @if map-get($Config_PartType_Example, moveTo) == $AREA_NONE {
    $titleContent:  map-get($Config_PartType_Example, titleContent);
    $solutionTitleContent:  map-get($Config_PartType_Example, solutionTitleContent);
    $hasCommentary:  map-get($Config_PartType_Example, hasCommentary);
    $resetAt: map-get($Config_PartType_Example, resetAt);
    $solutionNumberedTitleContent:  map-get($Config_PartType_Example, solutionNumberedTitleContent);

    @include validate_typeOptional($solutionNumberedTitleContent, map);

    @if $solutionNumberedTitleContent {
      @include count_countSolutions(solutions);
    }

    @if $resetAt == moduleReset {
      @include count_countSectionExamples(exampleInSection);
    } @else {
      @include count_countExamples(example);
    }
    @if release-flag-enabled(appendix-has-numbered-examples) {
      @if map-has-key($Config_PartType_Example, apTitleContent) {
        $apTitleContent: map-get($Config_PartType_Example, apTitleContent);
        @include number_numberSpecifiedExamples($titleContent, $solutionTitleContent, $hasCommentary, $apTitleContent, $solutionNumberedTitleContent);
      } @else {
        @include number_numberContentExamples($titleContent, $solutionTitleContent, $hasCommentary, $solutionNumberedTitleContent);
      }
    } @else {
      @include number_numberContentExamples($titleContent, $solutionTitleContent, $hasCommentary, $solutionNumberedTitleContent);
    }
  }

  @if $Config_CustomExample != () {
    $firstCounterName: map-get($Config_CustomExample, firstCounterName);
    $secondCounterName: map-get($Config_CustomExample, secondCounterName);
    $customClass: map-get($Config_CustomExample, customClass);
    $customResetSelector: map-get($Config_CustomExample, customResetSelector);
    $titleContent:  map-get($Config_CustomExample, titleContent);
    $customTitleContent:  map-get($Config_CustomExample, customTitleContent);
    $solutionTitleContent:  map-get($Config_CustomExample, solutionTitleContent);
    $hasCommentary:  map-get($Config_CustomExample, hasCommentary);
    $solutionNumberedTitleContent:  map-get($Config_CustomExample, solutionNumberedTitleContent);

    @include validate_typeOptional($solutionNumberedTitleContent, map);

    @if $solutionNumberedTitleContent {
      @include count_countSolutions(solutions);
    }

    @include count_countCustomExamples($firstCounterName, $secondCounterName, $customClass, $customResetSelector);
    @include number_numberCustomExamples($customClass, $titleContent, $customTitleContent, $solutionTitleContent, $hasCommentary, $solutionNumberedTitleContent)
  }

  // Number equations if they have a titleContent
  // @include validate_enum(map-get($Config_PartType_Equation, moveTo), $AREA__PREFIX__);
  $titleContent               : map-get($Config_PartType_Equation, titleContent);
  $numberAt                   : map-get($Config_PartType_Equation, numberAt);
  $numberAfterEq              : map-get($Config_PartType_Equation, numberAfterEq);
  @if $titleContent {
    @include validate_typeOptional($numberAfterEq, bool);
    @include validate_enum($numberAt, $NUMBER__PREFIX__);
    @include count_countEquations(equation);
    @if $numberAt == $NUMBER_BEFORE_MOVE {
      @include number_equations($titleContent, $numberAfterEq);
    }
  }

  // @include count_countExamples(example);
  // @include number_numberExamples($exampleTitleContent, $exampleSolutionTitleContent);

  // Count and number any Notes that need it
  @each $note in $Config_Notes {
    $className: map-get($note, className);
    $titleContent: map-get($note, titleContent);
    $counterName: map-get($note, counterName);
    $resetAt: map-get($note, resetAt);
    $hasSolutions: map-get($note, hasSolutions);
    $solutionTitleContent: map-get($note, solutionTitleContent);
    @include validate_type($className, string);
    @include validate_typeOptional($titleContent, map);
    @include validate_typeOptional($counterName, string);

    @if $titleContent {
      @if $counterName {
        @if $resetAt == moduleReset {
          @include count_countSectionNote($counterName, $className);
        } @else {
          @include count_countNote($counterName, $className);
        }
      }
      @include number_numberNote($className, $titleContent, $hasSolutions, $solutionTitleContent);
    }
  }

  @include count_countTerms(term);
  @include reference_refPageIDStringAs(pageID);
  @include modify_prepIndexTerms(term, pageID);

  @include reference_refSectionHeaderNodeAs(sectionHeaderNode);
  @include compose_createSectionComposites($Config_SectionCompositePages, sectionHeaderNode);
  @include compose_createChapterComposites($Config_ChapterCompositePages, sectionHeaderNode);

  @each $unnumberedElement in $Config_UnnumberedElements {
    $contextSelector: map-get($unnumberedElement, contextSelector);
    $childSelector: map-get($unnumberedElement, childSelector);
    @include validate_type($contextSelector, string);
    @include validate_typeOptional($childSelector, string);
    @include modify_addUnnumbered($contextSelector, $childSelector);
  }

  $_chapterPrepCompoundCompositePages: ();
  @each $page in $Config_ChapterCompositePages {
    @if map-get($page, childPages) != null {
      $_chapterPrepCompoundCompositePages: append($_chapterPrepCompoundCompositePages, $page);
    }
  }
  @include compose_prepEOCcompoundCompositesPages($_chapterPrepCompoundCompositePages);
}
:pass(4) {
  $_chapterPrepCompoundCompositePages: ();
  @each $page in $Config_ChapterCompositePages {
    @if map-get($page, childPages) != null {
      $_chapterPrepCompoundCompositePages: append($_chapterPrepCompoundCompositePages, $page);
    }
  }
  @include compose_moveSectionSeparted($_chapterPrepCompoundCompositePages);
}
:pass(5) {
  //After: createChapterComposites
  // Construct the set of CompoundComposite pages by looping through the Config_ChapterCompositePages
  // and finding all that have a `childPages:` field
  $_chapterCompoundCompositePages: ();
  @each $page in $Config_ChapterCompositePages {
    @if map-get($page, childPages) != null {
      $_chapterCompoundCompositePages: append($_chapterCompoundCompositePages, $page);
    }
  }
  @include compose_EOCcompoundCompositesPages($_chapterCompoundCompositePages);

  //create a chapter outline
  $outlineTitle: map-get($Config_PartType_Chapter, outlineTitle);
  $hasLearningObjectives: map_get($Config_PartType_Chapter, hasLearningObjectives);
  @include validate_typeOptional($outlineTitle, string);
  @if $outlineTitle {
    @include compose_chapterOutline($outlineTitle, $hasLearningObjectives);
    @include modify_trash('.introduction [data-type="abstract"]');
  }

  @if $Config_hasHandbook {
    @include compose_handbookOutline($Config_HandbookOutlineTitleWord);
  }
}

:pass(6) {

  // After: modify_prepIndexTerms
  @include modify_finishPreppingIndexTerms($Config_Index_NotSymbolRegexp, $Config_Index_SymbolRegexp);
  @include modify_footnoteTitle($Config_FootnoteTitle);

  @if $Config_hasHandbook {
    @include compose_moveHandbookOutline();
  }
}
:pass(7) {

  //After: ???
  @include reference_refSectionHeaderNodeAs(sectionHeaderNode);
  @include reference_refSectionHeaderStringAs(sectionHeaderString);
  @include compose_prepBookComposites($Config_BookCompositePages, sectionHeaderNode, sectionHeaderString);

  //move the chapter outline to the introduction module
  @if map-get($Config_PartType_Chapter, outlineTitle) {
    @include compose_moveChapterOutline();
  }

  // Count exercises that were marked as moveTo: $AREA_EOC
  @include validate_enum(map-get($Config_PartType_Exercise, moveTo), $AREA__PREFIX__);
  @if map-get($Config_PartType_Exercise, moveTo) == $AREA_EOC {
    $resetAt:       map-get($Config_PartType_Exercise, resetAt);
    $numberAt:      map-get($Config_PartType_Exercise, numberAt);
    $titleContent:  map-get($Config_PartType_Exercise, titleContent);
    @include validate_enum($resetAt, $RESET__PREFIX__);
    @include validate_enum($numberAt, $NUMBER__PREFIX__);
    @include validate_exists($titleContent);

    $resetSel: null;
    @if       $resetAt == $RESET_SECTION        { $resetSel: '.os-eos', '[data-type="composite-page"]'; }
    @else if  $resetAt == $RESET_CHAPTER        { $resetSel: '[data-type="chapter"]'; }
    @else if  $resetAt == $RESET_COMPOSITE_PAGE { $resetSel: '[data-type="composite-page"]'; }
    @else { @error 'BUG: Invalid enum'; }

    @if $numberAt == $NUMBER_BEFORE_MOVE {
      @if $Config_SectionCompositePages != () {
        @include count_countEOSExercises(exerciseMaybeInContent, $resetSel);
        @include number_numberEOSExercises($titleContent, $titleContent);
        @include count_countEOCExercises(exerciseMaybeInContent, $resetSel);
        @include number_numberEOCExercises($titleContent, $titleContent);
      } @else {
        @include count_countEOCExercises(exercise, $resetSel);
        @include number_numberEOCExercises($titleContent, $titleContent);
      }


      @if map-get($Config_PartType_Solution, moveTo) == $AREA_TRASH_HALF {
        @include modify_tagRemovedSolutions();
      }
    } @else if $numberAt == $NUMBER_AFTER_MOVE {
    } @else { @error 'BUG: Invalid enum'; }
  }
}
:pass(8) {
  @include modify_ExercisePrefix($Config_ChapterCompositePages); //if solutions are being moved on this pass then they will not be prefixed
  @if $Config_hasStimuli {
    @include count_countStimulusExercises(stimuli, $Config_stimuliSectionClass);
    @include number_numberStimulusExercises($Config_ContentStimuliExercise_TitleContent);
  }
  @if $Config_PartType_CoreqSkills != () {
    $sectionClassName:  map-get($Config_PartType_CoreqSkills, sectionClassName);
    $counterName:  map-get($Config_PartType_CoreqSkills, counterName);
    $exerciseTitleContent: map-get($Config_PartType_CoreqSkills, exerciseTitleContent);

    @include count_countCoreqExercises($counterName, $sectionClassName);
    @include number_numberCoreqExercises($exerciseTitleContent);
  }

  //After: createChapterComposites, numberEOCExercises
  @include count_countExercises(exerciseAll);
  // Only link up problems and solutions if they will not be discarded (optimization)
  @if map-get($Config_PartType_Exercise, numberAt) == $NUMBER_BEFORE_MOVE {
    @if map-get($Config_PartType_Solution, moveTo) == $AREA_TRASH_HALF {
      @include modify_trashTaggedSolutions();
    }
  }
  @if map-get($Config_PartType_Solution, moveTo) == $AREA_TRASH {
  } @else if map-get($Config_PartType_Solution, moveTo) == $AREA_TRASH_HALF {
    @include link_linkToProblemsFromSolutionsEOC($trashHalf: true)
  } @else {
    @include link_linkToProblemsFromSolutionsEOC($trashHalf: false);
  }
}
:pass(9) {
  @if $Config_SectionCompositePages != () {
    @include count_countChapters(chapter);
    @include count_countSections(section);
  }
  //Only move solutions after exercises/solutions are numbered
  @include reference_refSectionHeaderNodeAs(sectionHeaderNode);
  @each $page in $Config_SectionCompositePages {
    $moveSolutionsTo: map-get($page, moveSolutionsTo);
    @include validate_enumOptional($moveSolutionsTo, $AREA__PREFIX__);
     @if $moveSolutionsTo == $AREA_EOC {
      @include compose_createEOCSolutions($Config_ChapterCompositePages, $page, sectionHeaderNode);
    } @else if $moveSolutionsTo == $AREA_EOB {
      @include compose_createEOBSolutions($Config_ChapterCompositePages, $Config_Notes, $page, sectionHeaderNode);
    }
  }
  @each $page in $Config_ChapterCompositePages {
    $moveSolutionsTo: map-get($page, moveSolutionsTo);
    @include validate_enumOptional($moveSolutionsTo, $AREA__PREFIX__);
    @if $moveSolutionsTo == $AREA_EOC {
      @include compose_createEOCSolutions($Config_ChapterCompositePages, $page, sectionHeaderNode);
    } @else if $moveSolutionsTo == $AREA_EOB {
      @include compose_createEOBSolutions($Config_ChapterCompositePages, $Config_Notes, $page, sectionHeaderNode);
    }
  }

  // After: Solution trashing
  @if $Config_addSolutionHeader {
    @each $header in $Config_addSolutionHeader {
      $solutionSelector                : map-get($header, selector);
      $solutionTitle                   : map-get($header, title);
      @include modify_addSolutionHeader($solutionSelector, $solutionTitle);
    }
  }

  // Copy/pasta from above
  // TODO: Combine bookCompositePages and chapterCompositePages in the config and then split them out in this file
  @each $page in $Config_BookCompositePages {
    $moveSolutionsTo: map-get($page, moveSolutionsTo);
    @include validate_enumOptional($moveSolutionsTo, $AREA__PREFIX__);
    @if $moveSolutionsTo == $AREA_EOB {
      @include compose_createEOBSolutions($Config_SectionCompositePages, $Config_ChapterCompositePages, $Config_Notes, $page, sectionHeaderNode);
    } @else if $moveSolutionsTo == $AREA_EOC {
      @error "BUG: For now this item should have been in chapterCompositePages but it was in bookCompositePages";
    }
  }
  //After: prepBookComposites
  @include compose_createBookComposites($Config_BookCompositePages);

  @each $subtitle in $Config_SubtitleLabels {
    $selector: map-get($subtitle, selector);
    $subtitleSelector: map-get($subtitle, subtitleSelector);
    $stringName: map-get($subtitle, stringName);

    #{$selector} #{$subtitleSelector} {
      @include _refStringAs(#{$stringName}, content());
    }

    #{$selector} {
      &:deferred {
        attr-use-subtitle: string(#{$stringName});
      }
    }
  }

  @include modify_exerciseNoteTitle($Config_ExerciseNoteTitle);
}
:pass(10) {
  //After: prepIndexTerms, createBookComposites
  @include modify_addIndexSymbolGroup("index", $Config_Index_SymbolsSectionTitle);

  //After: composite page creation
  @include count_countChapters(chapter);
  @if $Config_SectionCompositePages != () { @include count_countSections(section); }
  @include count_countAppendices(appendix);

  @if $Config_ResetSectionCounter == true { @include count_countSections(section); }
  
  @if map-get($Config_PartType_Exercise, moveTo) == $AREA_EOC { //check to see if this code is redundent,   same block above
    $resetAt:       map-get($Config_PartType_Exercise, resetAt);
    $numberAt:      map-get($Config_PartType_Exercise, numberAt);
    $titleContent:  map-get($Config_PartType_Exercise, titleContent);

    @include validate_enum($resetAt, $RESET__PREFIX__);
    @include validate_enum($numberAt, $NUMBER__PREFIX__);
    @include validate_type($titleContent, map);

    $resetSel: null;
    @if       $resetAt == $RESET_SECTION        { $resetSel: '.os-eos'; }
    @else if  $resetAt == $RESET_CHAPTER        { $resetSel: '[data-type="chapter"]'; }
    @else if  $resetAt == $RESET_COMPOSITE_PAGE { $resetSel: '[data-type="composite-page"]'; }
    @else { @error 'BUG: Invalid enum'; }
    @include count_countEOCExercises(exercise, $resetSel);

    @if $numberAt == $NUMBER_AFTER_MOVE {
       @include number_numberEOCExercises($titleContent, $titleContent);
    } @else if $numberAt == $NUMBER_BEFORE_MOVE {
    } @else { @error 'BUG: Invalid enum'; }
  }

  $resetAt: map-get($Config_PartType_Example, resetAt);
  @if $resetAt == moduleReset {
    @include count_countSectionExamples(exampleInSection);
  } @else {  
    @include count_countExamples(example);
  }

  @if $Config_CustomExample != () {
    $firstCounterName: map-get($Config_CustomExample, firstCounterName);
    $secondCounterName: map-get($Config_CustomExample, secondCounterName);
    $customClass: map-get($Config_CustomExample, customClass);
    $customResetSelector: map-get($Config_CustomExample, customResetSelector);

    // it has to be repeated here to be on the same pass as setTargetLabels
    @include count_countCustomExamples($firstCounterName, $secondCounterName, $customClass, $customResetSelector);
  }

  @include count_countEquations(equation);
  @include link_setTargetLabels($Config_SubtitleLabels);
  @include link_setTargetLabels($Config_TargetLabels);
  @include link_setLinkLabels();

  // Number equations if they have a titleContent
  // @include validate_enum(map-get($Config_PartType_Equation, moveTo), $AREA__PREFIX__);
  $titleContent               : map-get($Config_PartType_Equation, titleContent);
  $numberAt                   : map-get($Config_PartType_Equation, numberAt);
  $numberAfterEq              : map-get($Config_PartType_Equation, numberAfterEq);
  @if $titleContent {
    @include validate_typeOptional($numberAfterEq, bool);
    @include validate_enum($numberAt, $NUMBER__PREFIX__);
    @if $numberAt == $NUMBER_AFTER_MOVE {
      @include number_equations($titleContent, $numberAfterEq);
    }
  }
  @include reference_refBookMetadataNodeAs(bookMetadata);
  @include modify_compositeMetadata(bookMetadata, $Config_hasCompositeChapter);
  //After: createChapterComposites, createEOCSolutions, createBookComposites
  @include compose_titleEOSComposites($Config_SectionCompositePages);
  @include compose_titleEOCComposites($Config_ChapterCompositePages);
  @include compose_titleEOBComposites($Config_BookCompositePages);
  //After: createChapterComposites, createEOCSolutions, createBookComposites
  @include modify_chapterAutoID();
  @include count_countExercisesInContentButNotInExample(exerciseMaybeInContent, $Config_PartType_Exercise);
  // This has to run before number_numberEOCExercises because its selector is more general than the EOC selector
  @include number_numberContentExercises($Config_ContentExercise_TitleContent, $Config_ContentSolution_TitleContent,
                                         $Config_ContentExercise_TitleContentAp, $Config_ContentSolution_TitleContentAp);

  @if $Config_CustomFigureCaption != () and $Config_CustomTableCaption != () {
    $firstCounterName: map-get($Config_CustomFigureCaption, firstCounterName);
    $secondCounterName: map-get($Config_CustomFigureCaption, secondCounterName);
    $customClass: map-get($Config_CustomFigureCaption, customClass);
    $customResetSelector: map-get($Config_CustomFigureCaption, customResetSelector);

    @include count_countCustomSectionFigures($firstCounterName, $secondCounterName, $customClass, $customResetSelector);
    @include number_setCaptions($Config_CustomFigureCaption, $Config_PartType_Figure_CaptionContent, $Config_PartType_Figure_CaptionContentAp, $Config_PartType_Figure_CaptionContentPr, $Config_PartType_Figure_CustomCaptionContent);

    $firstCounterName: map-get($Config_CustomTableCaption, firstCounterName);
    $secondCounterName: map-get($Config_CustomTableCaption, secondCounterName);
    $customClass: map-get($Config_CustomTableCaption, customClass);
    $customResetSelector: map-get($Config_CustomTableCaption, customResetSelector);

    @include count_countCustomSectionTables($firstCounterName, $secondCounterName, $customClass, $customResetSelector);
    @include number_setCaptions($Config_CustomTableCaption, $Config_PartType_Table_CaptionContent, $Config_PartType_Table_CaptionContentAp, $Config_PartType_Table_CaptionContentPr, $Config_PartType_Table_CustomCaptionContent);
  } @else {
    $resetAt: map-get($Config_SetTableCaption, resetAt);
    @if $resetAt == moduleReset {
      @include count_countSectionTables(table);
    } @else {
      @include count_countTables(table);
    }

    $resetAt: map-get($Config_SetFigureCaption, resetAt);
    @if $resetAt == moduleReset {
      @include count_countSectionFigures(figure);
    } @else {
      @include count_countFigures(figure);
    }

    @include number_setCaptions($Config_SetTableCaption, $Config_PartType_Table_CaptionContent, $Config_PartType_Table_CaptionContentAp, $Config_PartType_Table_CaptionContentPr);
    @include number_setCaptions($Config_SetFigureCaption, $Config_PartType_Figure_CaptionContent, $Config_PartType_Figure_CaptionContentAp, $Config_PartType_Figure_CaptionContentPr);
  }

  @if release-flag-enabled(trash-abstract-in-preface) {
    @include modify_trash('.preface [data-type="abstract"]');
  }

  @include modify_retitleHeaders($Config_hasCompositeChapter, $Config_hasHandbook); // Update the h2 h3 ... levels to make sense

  @if release-flag-enabled(custom-lists) {
    @include modify_lists($Config_CustomList);
  }

  @if $Config_TrashSelectedElements != () {
    @each $trash in $Config_TrashSelectedElements {
      @include modify_trash($trash);
    }
  }
  @if $Config_NoteExerciseTitle {
    @each $entry in $Config_NoteExerciseTitle {
      $noteClass: map-get($entry, noteClass);
      $title: map-get($entry, title);

      @include validate_type($noteClass, string);
      @include validate_type($title, string);

      @include modify_addNoteExerciseHeader($noteClass, $title);
    }
  }
}
:pass(11) {
  @if release-flag-enabled(table-move-fake-title) {
    @if map-get($Config_SetTableCaption, hasTopTitle) == true {
      .os-table {
        .top-titled {
          thead tr:first-child {
            move-to: trash;
          }
        }

        .os-temporary-table-title {
          &::inside {
            class: "os-table-title";
          }
        }
      }
    }
  }

  //No Answer Key, make sure that solutions that are still present in the content are discarded
  @if map-get($Config_PartType_Solution, moveTo) == $AREA_TRASH {
    @if map-get($Config_PartType_Solution, HACKRemoveAllSolutionsNotJustEoC) == true {
      @include modify_trash('[data-type="solution"]');
    } @else {
      @include modify_trash('.os-eoc [data-type="solution"]');
    }
  }
  @include modify_trash('.os-index-link-separator:last-child');
  @include modify_retitleCompositeMetadata($Config_hasCompositeChapter);
  @include modify_tableSummaryToParent();
  @include trashEmptyElement ('table > caption');
  @include modify_addTableClass();

  @if release-flag-enabled(give-composites-ids) {
    @include modify_addCompositeIDsForToc();
  }

  @if not release-flag-enabled(custom-lists) {
    @include modify_lists($Config_CustomList);
  }

  @each $subtitle in $Config_SubtitleLabels {
    $selector: map-get($subtitle, selector);

    #{$selector} {
      attr-use-subtitle: "true";
    }
  }
  @include modify_elementsOrder($Config_Order_DocumentTitle);
  @include modify_elementsOrder($Config_Order_ChapterObjective);
  @include modify_elementsOrder($Config_Order_CompositePages);
  @include modify_elementsOrder($Config_Order_FigTableCaption);

  @include modify_HACKrmEmptyAnswKey();
}
:pass(12) {
  @if release-flag-enabled(table-move-fake-title) {
    @if map-get($Config_SetTableCaption, hasTopTitle) == true {
      .os-table {
        .os-table-title {
          move-to: tableFinalTitle;
        }
        .os-temporary-table-title {
          move-to: trash;
        }
        &::deferred {
          content: pending(tableFinalTitle) content();
        }
      }
    }
  }
  //After: All metadata tasks are completed
  @include modify_suppressURI($Config_hasCompositeChapter);
  @include toc_prepTOCElements($Config_hasCompositeChapter);
  @include modify_tableSummaryToSibling();

  @each $firstElement in $Config_FirstElements {
    $selector: map-get($firstElement, selector);
    $elementType: map-get($firstElement, elementType);
    @include validate_type($selector, string);
    @include validate_typeOptional($elementType, string);
    @include modify_addFirstElementClass($selector, $elementType);
  }

  @if release-flag-enabled(hack-rm-empty-answ-key) {
    .os-eob.os-solution-container.no-solutions {
      move-to: trash;
    }
    @include utils_clearTrash();
  }
}
:pass(13) {
  @include toc_putTOCElements($Config_TocTitleWord);
  @include modify_tagSplash();
  @include modify_wrapMathInPara();
  @include modify_tagExerciseWithFirstElementClass();
  @include modify_tagTableParentContainer();
  @include compose_UnnumberedSplash();
}
:pass(14) {
  @include toc_navTOCUnwrap();
  @if TEMPLATE() == "CARNIVAL" or TEMPLATE() == "CORN" or TEMPLATE() == "CARDBOARD" or TEMPLATE() == "COSMOS" or ($Config_hasGroupedIntroBody) {
    @include modify_groupChapOutlineIntroContent();
  }
}
:pass(15) {
  @include modify_groupTocTitleTextAndNumber('.os-toc-chapter');
  @include modify_groupTocTitleTextAndNumber('.os-toc-unit');
  @include modify_groupTocTitleTextAndNumber('.os-toc-appendix');
  @if release-flag-enabled(move-footnotes) {
    @if $Config_CustomFootnotes != () {
      @include modify_customFootnotes($Config_CustomFootnotes);
    } @else {
      @include count_footnotes(footnotes);
      @include count_footnoteLinks(footnoteLinks);
      @include number_footnotes(footnotes, footnoteLinks);
    }
  }
  @if release-flag-enabled(modify-column-container) {
    @include modify_columnContainer();
  }

  //for english comp - class not present in other titles
  //put in place for styling reqs
    //annotation icons needed to be in their own div so 
    //that they could display vertically next to text content
  .annotation {
    &::inside {
      class: 'os-text';
      container: span;
    }
  }
  @include modify_HACKrmAnswKeyTOC();
}
:pass(16) {
  @include modify_tagNoteref();

  //Sections w/ titles injected in config - implemented for English Comp
  //not very pretty but this will be moving to kitchen 
  @each $section in $Config_Custom_Section {
    $className: map-get($section, className);
    $text: map-get($section, text);
    $inject: map-get($section, inject);

    @include validate_type($className, string);
    @include validate_type($text, string);
    @include validate_type($inject, string);

    //inject new title and move old title to subtitle
    //for data-type page
    @if $inject == 'title' {
      [data-type="page"].#{$className} {
        > h2[data-type="document-title"] {
          > .os-text {
            string-set: subtitle content();
          }
          & + div {
            content: string(subtitle);
            container: h3;
            class: 'os-subtitle';
          }
          &:deferred {
            > .os-text {
              content: $text;
            }
          }
        }
      }
    }

    //inject given title in h3
    //take data-type title and put in h4
    //for sections
    @if $inject == 'subtitle' {
      section.#{$className}  {
        > [data-type="title"] {
          container: h4;
        }
        &:deferred {
          &::before {
            content: $text;
            container: h3;
            class: 'os-title';
          }
        }
      }
    }

    //inject given title as prefix
    //for sections
    @if $inject == 'title_prefix' {
      section.#{$className}  {
        > h3[data-type="title"] {
          content: $text content();
        }
      }
    }
  }

  @each $class in $Config_Annotation_Classes {
    p.#{$class} {
      &::before {
        class: $class;
        container: span;
        move-to: icons;
      }
    }
  }

  //for english comp - class not present in other titles
  //put in place for styling reqs
    //annotation icons needed to be in their own div so 
    //that they could display vertically next to text content
  p.annotation {
    &::before {
      class: 'os-icons';
      content: pending(icons);
    }
  }
  @if release-flag-enabled(hack-rm-empty-answ-key) {
    body.no-answerkey {
       > #toc > ol > li.os-toc-composite-chapter {
        move-to: trash;
      }
    }
  }
}
:pass(100) {
  // Get rid of delete-me objects that easybake misses
  @include utils_cleanUp();
  // Make sure trashed objects are deleted
  @include utils_clearTrash();
}
