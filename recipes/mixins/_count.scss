/// Base counting mixin - creates a counter with the given name, increment location, and reset location
/// @arg {Text} $name - The unquoted name of the counter that will be created
/// @arg {String} $selector - A string of the selector at which the counter will increment
/// @arg {String} $resetSelector - A string of the selector at which the counter will reset
/// @group count
@mixin _count($name, $selector, $resetSelector) {
  //Improvement: Resetting isn't dry, recreates selector if more than one counter resets on one element
  #{$resetSelector} {
    counter-reset: $name;
  }
  #{$selector} {
    counter-increment: $name;
  }
}


//TODO: call arguments explicity? Is this possible? Ex:
// @mixin count_countChapter($name) {
//   @include _count(
//     $name: $name,
//     $selector: 'div[data-type="chapter"]',
//     $resetSelector: 'body'
//   );
// }

/// A basic mixin for counting units using css counters
/// @arg {Text} $name - Name of the css counter that will control chapter numbering
/// @group count
@mixin count_countUnits($name) {
  @include _count(
    $name,
    'div[data-type="unit"]',
    'body'
  );
}

/// A basic mixin for counting chapters using css counters
/// @arg {Text} $name - Name of the css counter that will control chapter numbering
/// @group count
@mixin count_countChapters($name) {
  @include _count(
    $name,
    'div[data-type="chapter"]',
    'body'
  );
}

/// A basic mixin for counting appendices using css counters
/// @arg {Text} $name - Name of the css counter that will control appendix numbering`
/// @group count
@mixin count_countAppendices($name) {
  @include _count(
    $name,
    'div.appendix',
    'body'
  );
}

/// A basic mixin for counting sections within a chapter using css counters.
/// Does not count the introduction module.
/// @arg {Text} $name - Name of the css counter that will control section numbering
/// @group count
@mixin count_countSections($name) {
  @include _count(
    $name,
    'div[data-type="chapter"] > div[data-type="page"]:not(.introduction)',
    '[data-type="chapter"], .appendix'
  );
}

/// A basic mixin for counting sections within a Handbook using css counters.
/// @arg {Text} $name - Name of the css counter that will control Handbook section numbering
/// @group count
@mixin count_countHandbookSections($name) {
  @include _count(
    $name,
    '.handbook > section',
    '.handbook'
  );
}

@mixin count_countEOSExercises($name, $resetSelector) {
  @include _count(
    $name,
    '.os-eos [data-type="exercise"]',
    '#{$resetSelector}, .appendix'
  );
}

/// A basic mixin for counting end of chapter(EOC) exercises using css counters.
/// Resets at the chapter level.
/// @arg {Text} $name - Name of the css counter that will control exercise numbering
/// @group count

@mixin count_countEOCExercises($name, $resetSelector) {
  @include _count(
    $name,
    '.os-eoc [data-type="exercise"]',
    '#{$resetSelector}, .appendix'
  );
}

/// A basic mixin for counting all exercises within `.os-eoc` using css counters.
/// Resets at the body.
/// TODO Rename me to `count_countEOCExercisesWithoutReset` or something
/// @arg {Text} $name - Name of the css counter that will control all exercise numbering
/// @group count
@mixin count_countExercises($name) {
  @include _count(
    $name,
    '.os-eoc [data-type="exercise"]',
    'body'
  );
}

/// A basic mixin for counting all exercises within `.os-eoc` using css counters.
/// Resets at the body.
/// TODO Rename me to `count_countEOCExercisesWithoutReset` or something
/// @arg {Text} $name - Name of the css counter that will control all exercise numbering
/// @group count
@mixin count_countExercisesInContentButNotInExample($name, $exerciseConfig) {
  $reset: '[data-type="chapter"], .appendix';
  @if (map-get($exerciseConfig, moveTo) == $AREA_NONE and map-get($exerciseConfig, resetAt) == $RESET_SECTION) {
    $reset: str-insert($reset, ', section', str-length($reset) + 1)
  }
  @include _count(
    $name,
    ':not([data-type="example"]) > [data-type="exercise"]:not(.unnumbered)',
    $reset
  );
}

// a mixin to count stimulus questions
@mixin count_countStimulusExercises($name, $class) {
  @include _count(
    $name,
    '.#{$class} [data-type="problem"] .os-problem-container > div:not(.exercise-stimulus)',
    '.#{$class}'
  );
}

@mixin count_countCoreqExercises($name, $class) {
  @include _count(
    $name,
    '.#{$class} [data-type="exercise"].os-coreq-exercises',
    '.#{$class}'
  );
}

/// A basic mixin for counting examples within a chapter using css counters
/// @arg {Text} $name - Name of the css counter that will control example numbering
/// @group count
@mixin count_countExamples($name) {
  @if release-flag-enabled(appendix-has-numbered-examples) {
    @include _count(
    $name,
    'div[data-type="chapter"] [data-type="example"], .appendix [data-type="example"]',
    '[data-type="chapter"], .appendix'
    );
  } @else {
    @include _count(
    $name,
    'div[data-type="chapter"] [data-type="example"]',
    '[data-type="chapter"], .appendix'
    );
  }
}

/// A basic mixin for counting examples within a section using css counters
/// @arg {Text} $name - Name of the css counter that will control example numbering
/// @group count
@mixin count_countSectionExamples($name) {
  @include _count(
  $name,
  'section > [data-type="example"]',
  'div[data-type="page"], .appendix'
  );
}

/// A mixin for counting custom examples within section using css counters
/// @arg {Text} $firstName - name of the css counter that will control numbering of section examples WITHOUT special class
/// @arg {Text} $secondName - name of the css counter that will control numbering of section examples WITH special class
/// @arg {String} $exceptionClass - string of the selector of the custom example you want to count
/// @arg {String} $customResetSelector - string of the selector at which the counter for examples with special class will reset
/// @group count
@mixin count_countCustomExamples($firstName, $secondName, $exceptionClass, $customResetSelector) {
  @include _count(
    $firstName,
    'section > [data-type="example"]:not(.#{$exceptionClass})',
    'div[data-type="page"], .appendix'
  );
  @include _count(
    $secondName,
    '[data-type="example"].#{$exceptionClass}',
    '.#{$customResetSelector}'
  );
}

/// A basic mixin for counting solutions within an example using css counters
/// @arg {Text} $name - Name of the css counter that will control solution numbering
/// @group count
@mixin count_countSolutions($name) {
  @include _count(
  $name,
  '[data-type="example"] [data-type="solution"]:not(.unnumbered)',
  '[data-type="example"]'
  );
}

/// A basic mixin for counting `span[data-type="term"]` using css counters
/// @arg {Text} $name - Name of the css counter that will control term numbering
/// @group count
@mixin count_countTerms($name) {
  @include _count(
    $name,
    'div[data-type="page"] span[data-type="term"], div[data-type="composite-page"] span[data-type="term"]',
    'body'
  );
}

/// A basic mixin for counting tables using css counters
/// @arg {Text} $name - Name of the css counter that will control table numbering
/// @group count
@mixin count_countTables($name) {
  @include _count(
    $name,
    ':not(table) > table:not(.unnumbered)',
    '[data-type="chapter"], .appendix, .preface'
  );
}

/// A basic mixin for counting tables within a module using css counters
/// @arg {Text} $name - Name of the css counter that will control table numbering
/// @group count
@mixin count_countSectionTables($name) {
  @include _count(
    $name,
    ':not(table) > table:not(.unnumbered)',
    '[data-type="page"], [data-type="composite-page"], .appendix, .preface'
  );
}

/// A mixin for counting custom tables within section using css counters
/// @arg {Text} $firstName - name of the css counter that will control numbering of section tables WITHOUT special class
/// @arg {Text} $secondName - name of the css counter that will control numbering of section tables WITH special class
/// @arg {String} $exceptionClass - string of the selector of the custom tables you want to count
/// @arg {String} $customResetSelector - string of the selector at which the counter for tables with special class will reset
/// @group count
@mixin count_countCustomSectionTables($firstName, $secondName, $exceptionClass, $customResetSelector) {
  @include _count(
    $firstName,
    ':not(table) > table:not(.unnumbered):not(.#{$exceptionClass})',
    '[data-type="page"], [data-type="composite-page"], .appendix, .preface'
  );
  @include _count(
    $secondName,
    ':not(table) > table.#{$exceptionClass}:not(.unnumbered)',
    '.#{$customResetSelector}'
  );
}

/// A basic mixin for counting figures using css counters
/// @arg {Text} $name - Name of the css counter that will control figure numbering
/// @group count
@mixin count_countFigures($name) {
  @include _count(
    $name,
    ':not(figure) > figure:not(.unnumbered)',
    '[data-type="chapter"], .appendix, .preface'
  );
}

/// A basic mixin for counting figures within a module using css counters
/// @arg {Text} $name - Name of the css counter that will control figure numbering
/// @group count
@mixin count_countSectionFigures($name) {
  @include _count(
    $name,
    ':not(figure) > figure:not(.unnumbered)',
    '[data-type="page"], [data-type="composite-page"], .appendix, .preface'
  );
}

/// A mixin for counting custom figures within section using css counters
/// @arg {Text} $firstName - name of the css counter that will control numbering of section figures WITHOUT special class
/// @arg {Text} $secondName - name of the css counter that will control numbering of section figures WITH special class
/// @arg {String} $exceptionClass - string of the selector of the custom figures you want to count
/// @arg {String} $customResetSelector - string of the selector at which the counter for figures with special class will reset
/// @group count
@mixin count_countCustomSectionFigures($firstName, $secondName, $exceptionClass, $customResetSelector) {
  @include _count(
    $firstName,
    ':not(figure) > figure:not(.unnumbered):not(.#{$exceptionClass})',
    '[data-type="page"], [data-type="composite-page"], .appendix, .preface'
  );
  @include _count(
    $secondName,
    ':not(figure) > figure.#{$exceptionClass}',
    '.#{$customResetSelector}'
  );
}

/// A basic mixin for counting notes using css counters
/// @arg {Text} $name - Name of the css counter that will control note numbering
/// @arg {String} $type - A string of the selector of the note type you want to count
/// @group count
@mixin count_countNote($name, $type) {
  @include _count(
    $name,
    '[data-type="note"].#{$type}',
    '[data-type="chapter"], .appendix'
  );
}

/// A basic mixin for counting notes within a module using css counters
/// @arg {Text} $name - Name of the css counter that will control note numbering
/// @arg {String} $type - A string of the selector of the note type you want to count
/// @group count
@mixin count_countSectionNote($name, $type) {
  @include _count(
    $name,
    '[data-type="note"].#{$type}',
    '[data-type="page"], .appendix'
  );
}

/// A basic mixin for counting equations using css counters
/// @arg {Text} $name - Name of the css counter that will control equation numbering
/// @group count
@mixin count_countEquations($name) {
  @include _count(
    $name,
    '[data-type="equation"]:not(.unnumbered)',
    '[data-type="chapter"], .appendix'
  );
}


/// A basic mixin for counting citations using css counters
/// @arg {Text} $name - Name of the css counter that will control reference numbering
/// @group count
@mixin count_citations($name) {
  @include _count(
    $name,
    'div.reference',
    '[data-type="chapter"]'
  )
}

/// A basic mixin for counting footnote links in text using css counters
/// @arg {Text} $name - Name of the css counter that will control footnote link numbering
/// @group count
@mixin count_citationsLinks($name) {
  @include _count(
    $name,
    'a[data-type="cite"]',
    '[data-type="chapter"]'
  )
}

@mixin count_endNotesLinks($name) {
  [data-type="chapter"]{
    counter-reset: $name 1;
  }
   a[data-type="cite"]{
    counter-increment: $name;
  }
}

@mixin count_endNotes($name) {
  @include _count(
    $name,
    '.references [data-type="note"]',
    '[data-type="chapter"]'
  )
}

/// A basic mixin for counting footnotes using css counters
/// @arg {Text} $name - Name of the css counter that will control footnote numbering
/// @group count
@mixin count_footnotes($name) {
  @include _count(
    $name,
    'aside[role="doc-footnote"]',
    '[data-type="chapter"], .appendix'
  )
}

@mixin count_customFootnotes($name, $resetSelector, $parentSelector: null) {
  $selector: '';
  @if $parentSelector != null {
    $selector: $parentSelector 'aside[role="doc-footnote"]';
  } @else {
    $selector: 'aside[role="doc-footnote"]';
  }

  @include _count(
    $name,
    $selector,
    $resetSelector
  )
}

/// A basic mixin for counting footnote links in text using css counters
/// @arg {Text} $name - Name of the css counter that will control footnote link numbering
/// @group count
@mixin count_footnoteLinks($name) {
  @include _count(
    $name,
    'a[role="doc-noteref"]',
    '[data-type="chapter"], .appendix'
  )
}

@mixin count_customFootnoteLinks($name, $resetSelector, $parentSelector: null) {
  $selector: '';
  @if $parentSelector != null {
    $selector: '#{$parentSelector} a[role="doc-noteref"]';
  } @else {
    $selector: 'a[role="doc-noteref"]';
  }

  @include _count(
    $name,
    $selector,
    $resetSelector
  )
}
