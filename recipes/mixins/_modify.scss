/// Moves any matching selector to the trash
/// @arg {String} $selector - A string of the selector that needs to be trashed
/// @group modify
@mixin modify_trash($selector) {
  #{$selector} {
    move-to: trash;
  }
}

/// Changes preface title's container to `<h1>`
/// @group modify
@mixin modify_titlePreface() {
  //This only changes a container
  //will this be needed once the headers in raw are changed?
  div.preface {
    > [data-type="document-title"] {
      container: h1;
      content: content();
    }
  }
}

/// Modifies the `id` of each chapter title to `"chapTitle" counter(chapTitleNum)`
/// @group modify
@mixin modify_chapterAutoID() {
  div[data-type='chapter'] {
    > h1[data-type='document-title'] {
      counter-increment: chapTitleNum;
      attr-id: "chapTitle" counter(chapTitleNum);
    }
  }
}
//add a title to the Learning objectives when they don't have one
@mixin modify_addAbstractTitle($abstracTitle) {
  [data-type="abstract"] {
    &::before {
      container: h3;
      data-type: "title";
      content: $abstracTitle;
    }
  }
}

/// Trashes `[data-type="cnx-archive-uri"]` in `.os-eob` and `.os-eoc`
///Trashes `[data-type="cnx-archive-uri"]` in composite-chapters
/// @group modify
@mixin modify_suppressURI($hasCompositeChapter) {
  div.os-eoc,
  div.os-eob {
    [data-type="cnx-archive-uri"] {
      move-to: trash;
    }
  }
  @if $hasCompositeChapter {
    [data-type="composite-chapter"] {
      > [data-type="metadata"] > [data-type="cnx-archive-uri"] {
        move-to: trash;
      }
    }
  }
}

/// Adds labels to list with special classes or other selector
/// @group modify
@mixin modify_lists ($listConfig) {
  @if $listConfig {
    @each $list in $listConfig {
      $selector: map-get($list, selector);
      $name: map-get($list, name);
      $beforeLabel: map-get($list, beforeLabel);
      $afterLabel: map-get($list, afterLabel);

      @include validate_type($name, string);
      @include validate_type($afterLabel, string);

      $counterName: #{$name}-COUNTER;

      #{$selector} {
        counter-reset: #{$counterName};
        class: os-#{$name};
        > li {
          &::inside {
            container: span;
            class: "os-#{$name}-content";
          }
          &::before {
            container: span;
            class: "os-#{$name}-token";
            counter-increment: #{$counterName};
            content: $beforeLabel counter(#{$counterName}) $afterLabel;
            move-to: listBucket;
          }
          &:deferred {
            content: pending(listBucket) content();
          }
        }
      }
    }
  }
}

// Replace module titles with the ones set by collection.
@mixin modify_syncTitlesFromCollection() {
  @if release-flag-enabled("use-title-nodes") {
    div[data-type="metadata"] > [data-type="document-title"] {
      node-set: page-title;
    }
    :not([data-type="metadata"]) > [data-type="document-title"] {
      content: nodes(page-title);
    }
  } @else {
    div[data-type="page"] {
      > div[data-type="metadata"] > [data-type="document-title"] {
        string-set: page-title content();
      }
      > [data-type="document-title"] {
        content: string(page-title);
      }
    }
  }
}


/// Wraps all `[data-type="document-title"]` (excluding in the metadata) in a span with the class `os-text`. This is done before numbering.
/// @group modify
@mixin modify_spanWrapTitles() {
  @if release-flag-enabled("use-title-nodes") {
    :not([data-type="metadata"]) > [data-type="document-title"] > [data-type="document-title"] {
      container: span;
      class: "os-text";
      data-type: '';
      attr-itemprop: '';
    }
  } @else {
    :not([data-type="metadata"]) > [data-type="document-title"] {
      content: '';
      &::after {
        content: content();
        container: span;
        class: "os-text";
      }
    }
  }
}

@mixin modify_spanWrapHeadbookTitles() {
  .handbook > section > [data-type="title"] {
    content: '';
    &::after {
      content: content();
      container: span;
      class: "os-text";
    }
  }
}

/// Modifies all simulation links to open in a new browser window.
///
/// This is done only because TEA has asked for it.
/// This targets a class name because while some links point to
///   archive.cnx.org/specials, others point to PhET simulations at colorado.edu.
///
/// @group modify
@mixin modify_simLinkTarget() {
  a.os-interactive-link {
    attr-target: "_blank";
  }
}

/// Prepares index terms for grouping by the glossary. Modifies the `id` attribute of the term to include the `$pageIDString` and `$termCounter`
/// @arg {Text} $termCounter - The name of counter for terms
/// @arg {Text} $pageIDString - The page ID where the term is found
/// @group modify
@mixin modify_prepIndexTerms($termCounter, $pageIDString) {
  div[data-type="page"],
  div[data-type="composite-page"] {
    span[data-type="term"] {
      attr-id: "auto_" string($pageIDString) "_term" counter($termCounter);

      &[cmlnle|reference]::after {
        container: span;
        data-type: term-content;
        content: attr(#{"cmlnle|reference"});
      }
      &:not([cmlnle|reference])::after {
        container: span;
        data-type: term-content;
        content: content();
      }
    }
  }
}

@mixin modify_finishPreppingIndexTerms($regexpForNotASymbol, $regexpForASymbol) {
  @include validate_type($regexpForASymbol, string);
  @include validate_type($regexpForNotASymbol, string);
  div[data-type="page"],
  div[data-type="composite-page"] {
    span[data-type="term"] {
      > span[data-type="term-content"] {
        data-visited: true;
        &:match(#{$regexpForNotASymbol}) {
          string-set: group-by first-letter(content());
          data-done: true;
        }
        &:match(#{$regexpForASymbol}) {
          string-set: group-by " Symbols";
          data-done: true;
        }
        move-to: term-trash;
      }

      &:deferred {
        attr-group-by: string(group-by);
      }
    }
  }

  body:deferred::after {
    content: clear(term-trash);
  }
}

@mixin modify_prepGlossaryTerms() {
  div[data-type="page"],
  div[data-type="composite-page"] {
    dl > dt[cmlnle|reference]::after {
      container: span;
      data-type: glossary-content;
      content: attr(#{"cmlnle|reference"});
    }
  }
}

@mixin modify_finishPreppingGlossaryTerms($regexpForNotASymbol, $regexpForASymbol) {
  @include validate_type($regexpForASymbol, string);
  @include validate_type($regexpForNotASymbol, string);
  div[data-type="page"],
  div[data-type="composite-page"] {
    dl {
      > dt {
        > span[data-type="glossary-content"] {
          &:match(#{$regexpForNotASymbol}) {
            string-set: sort-by first-letter(content());
          }
          &:match(#{$regexpForASymbol}) {
            string-set: sort-by " Symbols";
          }
          move-to: glossary-trash;
        }
        &:deferred {
          attr-sort-by: string(sort-by);
        }
      }
    }
  }
  body:deferred::after {
    content: clear(glossary-trash);
  }
}

/// Modifies the ' Symbols' group name in index, should it exist, as the first group-label.
/// @arg {string} $location - The string of the location where title needs to be added
/// @arg {string} $name - The string of the title for this group
/// @group modify
@mixin modify_addIndexSymbolGroup($location, $name) {
  .os-#{$location}-container > div.group-by:first-of-type > span.group-label {
    &:match(\^\[ \]\(Symbols\|SYMBOLS\)) {
      content: $name;
    }
  }
}
/// Adds metadata to the composite pages
/// @arg {Text} $bookMetadata - The node set that contains the metadata
/// @group modify
@mixin modify_compositeMetadata($bookMetadata, $hasCompositeChapter) {
  $pageAndCompositeChapterSel: ('[data-type="composite-page"]');
  @if $hasCompositeChapter {
    $pageAndCompositeChapterSel: append($pageAndCompositeChapterSel, '[data-type="composite-chapter"]', comma);
  }
  #{$pageAndCompositeChapterSel} {
    content: nodes($bookMetadata) content();
  }
}

/// Adds the title for each composite page
/// @group modify
@mixin modify_retitleCompositeMetadata($hasCompositeChapter) {
  $pageAndCompositeChapterSel: ('[data-type="composite-page"]');
  @if $hasCompositeChapter {
    $pageAndCompositeChapterSel: append($pageAndCompositeChapterSel, '[data-type="composite-chapter"]', comma);
  }
  #{$pageAndCompositeChapterSel} {
    @if $hasCompositeChapter {
      > [data-type="composite-chapter"] > [data-type="composite-page"] {
        > [data-type="title"] {
          string-set: Cdoc-title-TOMETADATA content();
        }
        > [data-type="metadata"] {
          > [data-type="document-title"] {
            content: string(Cdoc-title-TOMETADATA);
          }
        }
      }
    }
    > [data-type="document-title"] {
      string-set: doc-title-TOMETADATA content();
    }
    > [data-type="metadata"] {
      > [data-type="document-title"] {
        content: string(doc-title-TOMETADATA);
      }
    }
  }
}

/// Modifies note feature to add a note title and optionally wrap the body content
/// @arg {map} $noteContent - map containing `$selector`, `$label` and `$isBodyWrapped`
/// @group modify

/// Modify the title of any container based on data-type and/or class. This is useful for oddball elements such as exercises used as notes.
@mixin modify_anyContainerTitle ($dataType, $selector) {
  div#{$dataType}#{$selector}  {
    > div[data-type="title"] {
      &::before {
        container: span;
        class: "os-title-label";
        content: content();
        move-to: anyContainerLabel;
      }
      move-to: trash;
    }
    &::after {
      container: div;
      content: pending(anyContainerLabel);
      class: "os-title";
      move-to: anyContainer;
    }
    &:deferred {
      content: pending(anyContainer) content();
    }
  }
}

@mixin modify_GenericNote() {
  @include _genericNoteNesting(1);
}

@mixin _genericNoteNesting($maxDepth, $depth: 0) {
  @if ($depth <= $maxDepth) {
    // We start counting the depth at 0, but the header objects will begin at h3
    $headingLevel: $depth + 3;
    // This is to ensure that nested notes, that have one to three non-note wrappers
    // between them and their parent note, will not be detected as unnested notes
    // The reason this looks bad is because CSS is bad and should feel bad for not
    // supporting anything that allows us to ensure all parents match a certain selector (e.i are not notes)
    $noteDepthSelector: (':not([data-type="note"]) > :not([data-type="note"]) > :not([data-type="note"]) > ');
    @if $depth > 0 {
      $noteDepthSelector: ('');
      @for $i from 1 through $depth {
        $noteDepthSelector: append($noteDepthSelector, '[data-type="note"]', 'space');
      }
    }
    // Using :not([class]) ensures that the selected note does not have a class of any kind (thus making it a "generic" note)
    #{$noteDepthSelector} [data-type="note"]:not([class]) {
      @include _genericNoteAtLevel($depth, $headingLevel)
    }
    @include _genericNoteNesting($maxDepth, $depth + 1);
  }
}

@mixin _genericNoteAtLevel($depth, $headingLevel) {
  $minorLevel: '';
  @if $depth > 0 {
    $minorLevel: 'depth#{$depth}';
  }
  &::inside {
    class: "os-note-body";
  }
  > div[data-type="title"] {
    container: span;
    class: "os-title-label";
    data-type: "";
    move-to: genericNoteLabel#{$minorLevel};
  }
  &:deferred::before {
    container: h#{$headingLevel};
    content: pending(genericNoteLabel#{$minorLevel});
    class: "os-title";
    attr-data-type: "title";
  }
}


@mixin modify_note($noteContent) {
  $className: map-get($noteContent, className);
  $labelText: map-get($noteContent, labelText);
  $titleContent: map-get($noteContent, titleContent);
  $replaceHeader: map-get($noteContent, replaceHeader);
  $useHeader: map-get($noteContent, useHeader);

  @include validate_type($className, string);
  @include validate_typeOptional($titleContent, map);
  @include validate_typeOptional($useHeader, bool);
  @include validate_typeOptional($labelText, string);
  // Check that exactly one option is provided
  @include validate_exists($titleContent or $labelText or $useHeader);
  @include validate_exists(not($titleContent and $labelText));
  @include validate_exists(not($titleContent and $useHeader));
  @include validate_exists(not($useHeader and $labelText));

  // $maxDepth is the maximum amount of note nesting to allow support for
  @include _noteNesting(1, $className, $labelText, $replaceHeader, $useHeader);
}

@mixin modify_ExercisePrefix($Config_ChapterCompositePages) {
  @each $page in $Config_ChapterCompositePages {
    $prefix: map-get($page, prefixExercise);
    $className: map-get($page, className);
    @include validate_typeOptional($prefix, string);
    @include validate_type($className, string);
    @if $prefix {
      .os-eoc .#{$className} [data-type="exercise"] {
        &.os-hasSolution {
          string-set: exerciseId attr(id);
          [data-type="problem"]  {
            &::before {
              container: a;
              content: $prefix;
              class: os-text;
              attr-href: "#" string(exerciseId) '-solution';
            }
          }
          [data-type="solution"] {
            &::before {
              container: a;
              content: $prefix;
              class: os-text;
              attr-href: "#" string(exerciseId);
            }
          }
        }
        &:not(.os-hasSolution){
          [data-type="problem"], [data-type="solution"] {
            &::before {
              container: span;
              content: $prefix;
              class: os-text;

            }
          }
        }
     }
    }
  }
}

@mixin _noteNesting($maxDepth, $className, $labelText, $replaceHeader, $useHeader, $depth: 0) {
  @if ($depth <= $maxDepth) {
    $headingLevel: $depth + 3;
    $noteDepthSelector: (':not([data-type="note"]) > :not([data-type="note"]) > :not([data-type="note"]) > ');
    @if $depth > 0 {
      $noteDepthSelector: ('');
      @for $i from 1 through $depth {
        $noteDepthSelector: append($noteDepthSelector, '[data-type="note"]', 'space');
      }
    }
    #{$noteDepthSelector} [data-type="note"].#{$className} {
      @include _noteAtLevel($depth, $labelText, $replaceHeader, $headingLevel, $useHeader)
    }
    @include _noteNesting($maxDepth, $className, $labelText, $replaceHeader, $useHeader, $depth + 1);
  }
}

@mixin modify_exampleTitle() {
  [data-type="example"] {
    .body > [data-type="title"], p > [data-type="title"] {
      container: h4
    }
  }
}
@mixin modify_examples() {
  [data-type="example"] {
    &::inside {
      class: "body"
    }
  }
}

@mixin modify_CoreqSkillsTitle($coreqSkillsTitleContent) {
  .coreq-skills {
    @include utils_title($coreqSkillsTitleContent, bCoreqSkillsLabel);
    &::after {
      container: h3;
      content: pending(bCoreqSkillsLabel);
      class: "os-title";
      move-to: bCoreqSkillsHeader;
    }
    &:deferred {
      content: pending(bCoreqSkillsHeader) content();
    }
    > [data-type="title"] {
      container: h4
    }
  }
}

@mixin _noteAtLevel($depth, $labelText, $replaceHeader, $headingLevel, $useHeader) {
  $minorLevel: '';
  @if $depth > 0 {
    $minorLevel: 'depth#{$depth}';
  }
  @if $replaceHeader {
    //Delete original title for note
    > div[data-type="title"] {
      move-to: trash;
    }
    //Handle subtitle
    > p:first-of-type {
      > span[data-type="title"] {
        &::deferred {
          container: h#{$headingLevel + 1};
          class: "os-subtitle";
          move-to: noteSubtitle#{$minorLevel};
        }
        &::inside {
          container: span;
          class: "os-subtitle-label";
        }
      }
    }
  } @else {
    > div[data-type="title"] {
      &::deferred {
        container: h#{$headingLevel + 1};
        class: "os-subtitle";
        move-to: noteSubtitle#{$minorLevel};
      }
      &::inside {
        container: span;
        class: "os-subtitle-label";
      }
    }
  }
  // //Wrap note body
  &::inside {
    class: "os-note-body";
    content: pending(noteSubtitle#{$minorLevel}) content();
  }
  @if $useHeader {
    > div[data-type="title"] {
      container: span;
      class: "os-title-label";
      attr-data-type: "";
      move-to: myNoteLabel;
    }
    &:deferred::before {
      container: h#{$headingLevel};
      content: pending(myNoteLabel);
      class: "os-title";
      attr-data-type: "title";
    }
  } @else {
    // Make new title for note
    &:deferred::before {
      container: span;
      class: "os-title-label";
      content: $labelText;
      move-to: bNoteLabel;
    }
    &:deferred::before {
      container: h#{$headingLevel};
      content: pending(bNoteLabel);
      class: "os-title";
      attr-data-type: "title";
    }
  }
}

/// NEEDS DOCUMENTATION
/// @group needs-docs
@mixin modify_retitleHeaders ($hasCompositeChapter, $hasHandbook) {
  [data-type="chapter"] {
    [data-type="page"] {
      :not([data-type="note"]) > :not([data-type="note"]) > [data-type="note"],
      [data-type="example"],
      [data-type="exercise"] {
        > .os-title {
          container: h3;
        }
        [data-type="solution"] {
          .solution-title {
            container: h4;
          }
        }
      }
      [data-type="example"] {
        @if release-flag-enabled(titles-in-examples) {
          [data-type="problem"] {
            .os-problem-container > [data-type="title"] {
              container: h4;
            }
          }
          [data-type="solution"] {
            [data-type="solution-title"] {
              container: h4;
            }
          }
          [data-type="commentary"] {
            > [data-type="title"],
            > [data-type="commentary-title"] {
              container: h4;
            }
          }
        }
      }
    }
  }
 [data-type="composite-page"] {
  &.os-eoc {
    > section {
      @if release-flag-enabled(EOCsection-links) {
        >a [data-type="document-title"] {
          container: h3;
        }
      } @else {
        >[data-type="document-title"] {
          container: h3;
        }
      }
    }
    > div > div > div > section {
      >[data-type="document-title"] {
        container: h4;
      }
    }
  }
  &.os-eob {
      >.os-chapter-area {
        >[data-type="document-title"] {
          container: h2;
        }
        >section {
          >[data-type="document-title"] {
            container: h3;
          }
        }
      }
    }
  }
  @if $hasCompositeChapter {
    [data-type="composite-chapter"] {
      > section,
      > [data-type="page"], > [data-type="composite-page"], [data-type="composite-chapter"] {
        [data-type="document-title"], [data-type="title"] {
          container: h2;
        }
        > section {
          [data-type="document-title"], [data-type="title"] {
            container: h3;
            data-type: title;
          }
          > section {
              [data-type="document-title"], [data-type="title"] {
                container: h4;
            }
          }
        }
      }

      > section,
      > [data-type="composite-page"] {
        [data-type="document-title"], [data-type="title"] {
          container: h3;
        }
        > section {
          [data-type="document-title"], [data-type="title"] {
            container: h4;
            data-type: title;
          }
          > section {
              [data-type="document-title"], [data-type="title"] {
                container: h5;
            }
          }
        }
      }
    }
  }
  .appendix {
    > section {
      > [data-type="title"], [data-type="document-title"]  {
        container: h2;
      }
      > section {
        > [data-type="title"], [data-type="document-title"] {
          container: h3;
        }
      }
    }
  }
  @if $hasHandbook {
    .handbook {
      > [data-type="document-title"] {
        container: h1;
      }
      > section {
        > [data-type="title"], [data-type="document-title"]  {
          container: h2;
        }
        > section {
          > [data-type="title"], [data-type="document-title"] {
            container: h3;
          }
          > section {
            > [data-type="title"], [data-type="document-title"] {
              container: h4;
            }
            > section {
              > [data-type="title"], [data-type="document-title"] {
                container: h5;
              }
            }
          }
        }
      }
    }
  }
  @if release-flag-enabled(add-unit-pages) {
    [data-type="unit"] > [data-type="page"] {
      > [data-type="document-title"] {
        container: h2;
      }
    }
  }
}

/// This moves the data-label attribute off of a list and into a new element so it is visible
/// @group modify
@mixin modify_wrapLists() {
  ol,
  ul {
    &[data-label]:not([data-label=""]) {
      // &::outside {
      //   tag-name-set: div;
      //   attrs-set: data-type list-container;
      //
      //   &::before {
      //     content: attr(data-label);
      //     class-add: os-label;
      //   }
      // }
      // The previous does not work. Instead, we have to do the following (& use a bucket)
      &::after {
        container: div;
        class: "os-label";
        content: attr(data-label);
        move-to: bListLabel;
      }
      &::outside {
        data-type: "list-container";
        container: div;
        content: pending(bListLabel) content();
      }

    }
  }
}

/// This moves the data-label attribute off of an exercise and into a new element so it is visible
/// @group modify
@mixin modify_wrapExercises() {
  [data-type="exercise"] {
    &[data-label]:not([data-label=""]) {
      // &::outside {
      //   tag-name-set: div;
      //   attrs-set: data-type list-container;
      //
      //   &::before {
      //     content: attr(data-label);
      //     class-add: os-label;
      //   }
      // }
      // The previous does not work. Instead, we have to do the following (& use a bucket)
      &::after {
        container: div;
        class: "os-label";
        content: attr(data-label);
        move-to: bTitleLabel;
      }
      &::outside {
        data-type: "exercise-container";
        container: div;
        content: pending(bTitleLabel) content();
      }
    }
    [data-type="problem"]::inside { class: "os-problem-container"; }
    [data-type="solution"]::inside { class: "os-solution-container"; }
  }
}

/// Will add a title/header with string param to solutions in a selected location
/// @group modify
@mixin modify_addSolutionHeader($selector, $titleString) {
  @include validate_type($selector, string);
  @include validate_type($titleString, string);

  #{$selector} [data-type="solution"] {
    > [data-type="title"] {
      move-to: trash;
    }
    $solutionTitleContent: (os-text: $titleString);
    @include utils_title($solutionTitleContent, bSolutionHeader);
    &::before {
      content: pending(bSolutionHeader);
      data-type: "title";
      class: "solution-title";
      container: h4;
    }
  }
}

/// This wraps every iframe with an element that has classes on it
/// saying which alternatives are present,
/// and adds a link that opens in a new window.
/// @group modify
@mixin modify_wrapIframesWithAlternatives() {
  // just a guard to make sure we did not already convert the iframe
  :not([data-type="alternatives"]) {
    // > iframe {
    //   class-add: os-is-iframe;
    //   &::outside {
    //     tag-name-set: "div";
    //     attrs-set: data-type "alternatives";
    //     class-add: "os-has-iframe" "os-has-link";
    //
    //     &::before {
    //       tag-name-set: "a";
    //       attrs-set: href attr(src), target "_window";
    //       class-add: "os-is-link";
    //       content: "link";
    //     }
    //   }
    // }
    //
    // The previous does not work. Instead, we have to do the following (& use a bucket)
    > iframe {
      class: attr(class) "os-is-iframe";
      &::after {
        container: a;
        class: "os-is-link";
        attr-target: "_window";
        attr-href: attr(src);
        content: $Config_IFrameActivationLink;
        move-to: bIframeLink;
      }
      &::outside {
        container: div;
        data-type: "alternatives";
        class: "os-has-iframe os-has-link";
        content: pending(bIframeLink) content();
      }

    }
  }
}


@mixin modify_addUnnumbered ($sourceSelector, $element) {
  @if $element {
    #{$sourceSelector} {
      #{$element}:not(.unnumbered) {
        class: attr(class) " unnumbered";
      }
    }
  } @else {
    #{$sourceSelector}:not(.unnumbered) {
      class: attr(class) " unnumbered";
    }
  }
}

@mixin modify_tagRemovedSolutions() {
  [data-type="chapter"] {
    counter-reset: solution_trash_half;
  }
  .os-eoc .os-hasSolution[data-type="exercise"] {
    counter-increment: solution_trash_half;
    string-set: trashStatus "";
    [data-type="solution"] {
      string-set: trashStatus counter(solution_trash_half);
    }
    &::deferred {
      attr-trash-status: string(trashStatus);
    }
  }
}

@mixin modify_trashTaggedSolutions() {
  .os-eoc .os-hasSolution[data-type="exercise"] {
    &[trash-status$="0"],
    &[trash-status$="2"],
    &[trash-status$="4"],
    &[trash-status$="6"],
    &[trash-status$="8"] {
      class: attr(class) "-trashed";
      [data-type="solution"] {
        move-to: trash;
      }
    }
  }
}
//this will move exercise-stimulus to the exercise
@mixin modify_tagStimulusExercises() {
  [data-type="chapter"] [data-type="page"] [data-type="exercise"]:not(.unnumbered) {
    .exercise-stimulus {
      string-set: isStimulus " os-hasStimulus";
    }
    string-set: isStimulus "";
    &::deferred {
      class: attr(class) string(isStimulus) ;
    }
  }
}

@mixin modify_tagMissingExercises() {
  [data-type="exercise"] {
    string-set: missing "";
    div.missing-exercise {
      string-set: missing " missing-exercise";
    }
    &::deferred {
      $addedClass: if(release-flag-enabled(goodbye-warnings), string(missing, ''), string(missing));
      class: attr(class) $addedClass;
    }
  }
}

@mixin modify_tagCoreqExercises() {
  [data-type="page"] section.coreq-skills .practice-perfect [data-type="exercise"]:not(.unnumbered) {
    class: "os-coreq-exercises" ;
  }
}

/// A mixin for tagging numbered elements from Coreq Skills section, like examples, tables, figures
/// The class created here is used for defining custom counters for these elements
@mixin modify_tagCoreqElement($selector) {
  [data-type="page"] section.coreq-skills {
    #{$selector} {
      class: attr(class) " os-coreq-element" ;
    }
  }
}

@mixin modify_dataNumberStyle() {
  ol[data-number-style="lower-alpha"]{
    attr-type: "a";
  }
}

@mixin modify_tableSummaryToParent() {
  div.os-table {
    &:deferred {
      &::before {
        class: 'temp-summary';
        content: string(tableSummary);
      }
    }
    .os-caption-container {
      string-set: tableSummary content();
    }
  }
}

@mixin modify_tableSummaryToSibling() {
  div.os-table {
    table[summary] {
      attr-summary: string(tableSummary);
    }
  }
  div.temp-summary {
    string-set: tableSummary content();
    move-to: trash;
  }
}

/// This adds a div container with `os-table` class
/// to any table in the book that didn't receive the `os-table`
/// class in content
///
@mixin modify_addTableClass() {
  :not(.os-table) > table {
    &::outside {
      container: div;
      class: os-table;
    }
  }
}

@mixin modify_addChapterPageClass() {
  [data-type="chapter"] > [data-type="page"]:not(.introduction) {
    class: attr(class) " chapter-content-module"
  }
}

@mixin modify_customFootnotes($footnoteConfig) {
  @each $footnote in $footnoteConfig {
    $incrementParentSelector: map-get($footnote, incrementParentSelector);
    $resetSelector: map-get($footnote, resetSelector);
    $counterName: map-get($footnote, counterName);
    $counterType: map-get($footnote, counterType);

    @include validate_typeOptional($incrementParentSelector, string);

    @if $incrementParentSelector {
      @include count_customFootnotes(#{$counterName}, $resetSelector, $incrementParentSelector);
      @include count_customFootnoteLinks(#{$counterName}Link, $resetSelector, $incrementParentSelector);
      @include number_customFootnotes(#{$counterName}, #{$counterName}Link, $counterType, $incrementParentSelector);
    } @else {
      @include count_customFootnotes(#{$counterName}, $resetSelector);
      @include count_customFootnoteLinks(#{$counterName}Link, $resetSelector);
      @include number_customFootnotes(#{$counterName}, #{$counterName}Link, $counterType);
    }
  }
}

//select body content and chap outline in the intro and place them into one div
@mixin modify_groupChapOutlineIntroContent() {
  @if release-flag-enabled(groupChapOutlineIntroContent) {
    $element: outline;
    $selector: '.os-chapter-outline';
    @if $Config_PartType_Chapter == () {
      $element: objectives;
      $selector: '.chapter-objectives';
    }
    .introduction {
      #{$selector} {
        move-to: chap-#{$element};
      }
      > :not(#{$selector}):not([data-type="metadata"]):not(.has-splash) {
        move-to: intro-text;
      }
      &::after {
        content: pending(intro-text);
        move-to: intro-body;
        class: "intro-text";
      }
      &:deferred::after {
        content: pending(chap-#{$element}) pending(intro-body);
        class: "intro-body";
      } 
    }
  }
}

@mixin modify_addFirstElementClass($element, $elementtype ) {
  @if release-flag-enabled(exercise-first-element) {
    [data-type="exercise"]:not(.unnumbered) .os-problem-container {
      @if $elementtype == inlineList {
        #{$element} {
        class: attr(class) " first-inline-list-element";
        }
      } @else {
      #{$element} {
        class: attr(class) " first-element";
      }
      }
    }

    @each $page in $Config_BookCompositePages {
      $type: map-get($page, type);    
          @if $type == "Answer Key" { // see config.scss file for u-physics for details
            .os-eob [data-type="solution"] .os-solution-container {
              @if $elementtype == inlineList {
                #{$element} {
                  class: attr(class) " first-inline-list-element";
                } 
              } @else { 
                #{$element} {
                class: attr(class) " first-element";
              }
            }
          }
        }
      }
      @each $page in $Config_ChapterCompositePages {
        $type: map-get($page, type);
          @if $type == "Solutions" { // this key has been used here to select solutions in chapter composite pages. Added in config.scss file for statistics books
            .os-eoc [data-type="solution"] .os-solution-container {
              @if $elementtype == inlineList {
                #{$element} {
                  class: attr(class) " first-inline-list-element";
                } 
              } @else { 
                #{$element} {
                class: attr(class) " first-element";
              }
            }
          }
        }
      }
    }
  }

@mixin modify_tagExerciseWithFirstElementClass() {
  @if release-flag-enabled(exercise-first-element) {
    .os-problem-container {
      string-set: hasFirstElement " ";
      .first-element {
        string-set: hasFirstElement " has-first-element";
      }
      &:deferred {
        class: attr(class) string(hasFirstElement);
      }
        @if $Config_hasFirstInlineListElement == true {
          .first-inline-list-element {
            string-set: hasFirstElement " has-first-inline-list-element";
          }
          &:deferred {
            class: attr(class) string(hasFirstElement);
          }
      }
    }

    @each $page in $Config_BookCompositePages {
      $type: map-get($page, type);

      @if $type == "Answer Key" {
        .os-solution-container {
          string-set: hasFirstElement " ";
          .first-element {
            string-set: hasFirstElement " has-first-element";
          }
          &:deferred {
            class: attr(class) string(hasFirstElement);
          }
          @if $Config_hasFirstInlineListElement == true {
            .first-inline-list-element {
              string-set: hasFirstElement " has-first-inline-list-element";
            }
            &:deferred {
              class: attr(class) string(hasFirstElement);
            }
          }
        }
      }
    }

    @each $page in $Config_ChapterCompositePages {
      $type: map-get($page, type);
        @if $type == "Solutions" { // this key has been used here to select solutions in chapter composite pages. Added in config.scss file for statistics books
          .os-solution-container {
            string-set: hasFirstElement " ";
            .first-element {
              string-set: hasFirstElement " has-first-element";
            }
            &:deferred {
              class: attr(class) string(hasFirstElement);
            }
            @if $Config_hasFirstInlineListElement == true {
              .first-inline-list-element {
                string-set: hasFirstElement " has-first-inline-list-element";
              }
              &:deferred {
                class: attr(class) string(hasFirstElement);
              }
            }
          }
      }
    }
  }
}

// Tag table parent container with inside table and create it's class based on the existing table class   
@mixin modify_tagTableParentContainer() {
      @each $tableClassSelector in $Config_Table_Classes {
      $tableClass: map-get($tableClassSelector , className); 
      $secondTableClass:  map-get($tableClassSelector , secondClassName); 
        .os-table {
            string-set: hasTable " ";
              @if $secondTableClass {
                table.#{$tableClass}.#{$secondTableClass} {
                  string-set: hasTable " os-#{$tableClass}-#{$secondTableClass}-container";
                }
                &:deferred {
                  class: attr(class) string(hasTable);
                }
              } @else {
                table.#{$tableClass}{
                  string-set: hasTable " os-#{$tableClass}-container";
                }
                &:deferred {
                  class: attr(class) string(hasTable);
                }
              }
    }
  }
}

//tag os-figure that contains splash image in introduction
@mixin modify_tagSplash() {
  @if release-flag-enabled(tagSplash) {
    .introduction > .os-figure {
      string-set: hasSplash " ";
      .splash {
        string-set: hasSplash " has-splash";
      }
      &:deferred {
        class: attr(class) string(hasSplash);
      }
    }
  }
}

@mixin modify_footnoteTitle($footnoteConfig) {
  [data-type="footnote-refs-title"] {
    content: $footnoteConfig;
  }
}

@mixin modify_classOrder($classNameList) {
  $contentList: content();
  @each $class in $classNameList {
    $contentList: $contentList pending(#{$class}Span);
    .#{$class} {
      move-to: #{$class}Span;
    }
  }
  &:deferred {
    content: $contentList;
  }
}

@mixin modify_elementsOrder($orderConfig) {
  @each $order in $orderConfig {
    $selector: map-get($order, selector);
    $classNameOrder: map-get($order, classNameOrder);

    #{$selector} {
      @include modify_classOrder($classNameOrder);
    }
  }
}

@mixin modify_addCompositeIDsForToc() {
  [data-type="composite-chapter"] > [data-type="document-title"]{
    counter-increment: composite-chapter;
    attr-id: "composite-chapter-" counter(composite-chapter);
  }
  [data-type="composite-page"] {
    counter-increment: composite-page;
    attr-id: "composite-page-" counter(composite-page);
  }
}

@mixin modify_exerciseNoteTitle($exerciseNoteConfig) {
  @each $exercise in $exerciseNoteConfig {
    $className: map-get($exercise, className);
    $labelText: map-get($exercise, labelText);

    @include validate_type($className, string);
    @include validate_type($labelText, string);

    [data-type="exercise"].#{$className} {
      $exerciseNoteTitleContent: (os-title-label: $labelText);
      @include utils_title($exerciseNoteTitleContent, bExerciseHeader);
      &::before {
        content: pending(bExerciseHeader);
        data-type: "title";
        class: "os-title";
        container: h3;
      }
    }
  }
}

//math in paragraphs need to be wrapped in a span so that if it occurs at the end of a line and is followed by punctuation, the line does not break before the punctuation
@mixin modify_wrapMathInPara() {
  p {
    math {
      &::outside {
        container: span;
        class: "os-math-in-para";
      }
    }
  }
}
//takes the string "Chapter" and the chapter number elements in the TOC and wraps them in a span
@mixin modify_groupTocTitleTextAndNumber($element) {
  nav#toc > ol #{$element} > a {
    > .os-part-text {
        move-to: partString;
      }
    > .os-number:deferred {
      content: pending(partString) content();  
    }
  }
}

//when property column-count is applied to <section> text displays from left to the right in columns, not from top to the bottom
//(see Appendix with Glossary in Microbiology)
@mixin modify_columnContainer() {
  section.column-container {
    container: div;
  }
}

// tag paragraphs that contain footnotes references
@mixin modify_tagNoteref() {
  p {
    string-set: hasNoteref " ";
    a[role="doc-noteref"] {
      string-set: hasNoteref " has-noteref";
    }
    &:deferred {
      class: attr(class) string(hasNoteref);
    }
  }
}

@mixin modify_addNoteExerciseHeader($noteClass, $title){
  [data-type="exercise"].#{$noteClass} {
    > [data-type="problem"] {
      &::before {
        attr-data-type: 'title';
        container: h4;
        class: 'exercise-title';
        content: $title;
      }
    }
  }
}
// Hacky solution
// Sociology 2e answer key is supressed, 3e key is present 
// Requested to use 1 recipe - this is to remove the empty key in 2e
@mixin modify_HACKrmEmptyAnswKey {
  @if release-flag-enabled(hack-rm-empty-answ-key) {
    .os-eob.os-solution-container[data-type="composite-chapter"] {
      string-set: solutions "no-solutions ";
      
      > [data-type="composite-page"] {
        > div[data-type="solution"] {
          string-set: solutions "has-solutions ";
        }
      }
      &:deferred {
        class: string(solutions) attr(class);
      }
    }
  }
}

@mixin modify_HACKrmAnswKeyTOC {
  @if release-flag-enabled(hack-rm-empty-answ-key) {
    body {
      string-set: answerkey "no-answerkey ";
  
      .os-eob.os-solution-container[data-type="composite-chapter"] {
        string-set: answerkey "has-answerkey";
      }
      &:deferred {
        class: string(answerkey) attr(class);
      }
    }
  }
}
