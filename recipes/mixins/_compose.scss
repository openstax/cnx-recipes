@import "./utils";

@mixin compose_titleEOSComposites($compositePages) {
  @each $page in $compositePages {
    $name: map-get($page, name);
    $titleContent: map-get($page, titleContent);
    $className: map-get($page, className);
    $childPages: map-get($page, childPages);
     // Validate
    @include validate_type($className, string);

    .os-eos.os-#{$className}-container {
      @if ($name != null) {
         @include validate_type($name, string);
      }
      @else {
        $name: ();
        @each $elementClass in map-keys($titleContent) {
          $name: append($name, map-get($titleContent, $elementClass));
        }
      }
      $titleContent: (
        os-text: $name
      );
      @include utils_title($titleContent, null, h3, "document-title");
    }
  }
}


/// Creates a title for a set of composite pages at the end of a chapter
/// @arg {Map} $compositePages - each element in this must contain a `name` and `source`
/// @group compose
@mixin compose_titleEOCComposites($compositePages) {
  @each $page in $compositePages {
    $name: map-get($page, name);
    $className: map-get($page, className);
    $childPages: map-get($page, childPages);

    // Validate
    @include validate_type($name, string);
    @include validate_type($className, string);
    @if ($childPages != null) {
      [data-type="composite-chapter"].os-eoc.os-#{$className}-container {
      $titleContent: (
        os-text: $name
        );
        @include utils_title($titleContent, null, h2, "document-title");
      }
      @each $cPage in $childPages {
        $cClassName: map-get($cPage, className);
        $cPageName: map-get($cPage, name);
        @include validate_type($cClassName, string);
        @include validate_type($cPageName, string);
        [data-type="composite-page"].os-eoc.os-#{$cClassName}-container {
          $cTitleContent: (
            os-text: $cPageName
            );
          @include utils_title($cTitleContent, null, h3, "title");
        }
      }
    } @else {
      [data-type="composite-page"].os-eoc.os-#{$className}-container {
        $titleContent: (
          os-text: $name
          );
        @include utils_title($titleContent, null, h2, "document-title");
      }
    }
  }
}

/// Creates a title for a set of composite pages at the end of the book
/// @arg {list} $compositePages - each element in this must contain a `name` and `source`
/// @group compose
@mixin compose_titleEOBComposites($compositePages) {
  @each $page in $compositePages {
    $name: map-get($page, name);
    $className: map-get($page, className);
    $compoundComposite: map-get($page, compoundComposite);
    // Validate
    @include validate_type($name, string);
    @include validate_type($className, string);
    @include validate_typeOptional($compoundComposite, bool);
    @if $compoundComposite and $Config_hasCompositeChapter {
      [data-type="composite-chapter"].os-eob.os-#{$className}-container {
        $titleContent: (
          os-text: $name
        );
        @include utils_title($titleContent, null, h1, "document-title");
        [data-type="composite-page"] {
          > span.os-text {
            move-to: CCcompositePageTitles;
          }
          &:deferred {
            &::before {
              container: h2;
              data-type: document-title;
              content: pending(CCcompositePageTitles);
            }
          }
        }
      }
    } @else {
      [data-type="composite-page"].os-eob.os-#{$className}-container {
        $titleContent: (
          os-text: $name
          );
        @include utils_title($titleContent, null, h1, "document-title");
      }
    }
  }
}

//Create End of Section composite pages
@mixin compose_createSectionComposites($compositePages, $sectionHeaderNode) {
  // Validate
  @include validate_type($compositePages, list);
   @each $page in $compositePages {
    @include _createSectionComposite($page, $sectionHeaderNode);
  }
}
@mixin _createSectionComposite($page, $sectionHeaderNode) {
  $className: map-get($page, className);
  $sortBy: map-get($page, sortBy);
  $compoundComposite: map-get($page, compoundComposite);
  $specialPageType: map-get($page, specialPageType);
   // Validate
  @include validate_type($className, string);
  @include validate_typeOptional($sortBy, string);
  @include validate_typeOptional($compoundComposite, bool);
  @include validate_type($sectionHeaderNode, string);
  @include validate_enumOptional($specialPageType, $PAGE__PREFIX__);
   div[data-type="chapter"] {
    string-set: chap-id attr(id);
    @if (not $compoundComposite) {
      $keyName: if($specialPageType == $PAGE_GLOSSARY, '<glossary>', '.#{$className}');
      $sourceSelector: if($specialPageType == $PAGE_GLOSSARY, 'div[data-type="#{$className}"] dl', 'section.#{$className}');
      @if ($specialPageType == $PAGE_GLOSSARY) {
        div[data-type="#{$className}"] {
          /* Discard this Page-specific glossary because it is collated later and the title is added when this is collated */
          move-to: trash;
        }
      }
      #{$sourceSelector} {
        > [data-type="title"] {
          /* Discard this Page-specific title because a chapter title is added when collated */
          move-to: trash;
        }
         move-to: #{$className}-TOCOMPOSITE;
      }
      [data-type="page"]::after {
        container: div;
        content: pending(#{$className}-TOCOMPOSITE);
        class: "os-eos os-#{$className}-container";
        data-uuid-key: "#{$keyName}";
        // this needs to be reworked to work see https://github.com/Connexions/cnx-easybake/issues/97
        // @if release-flag-enabled(toc-comp-page-linking) {
        //   attr-id: "#{$className}" string(chap-id);
        // }
        @if ($sortBy != null) {
          sort-by: #{$sortBy}, nocase;
        }
      }
    }
  }
}



/// Creates a title for a set of composite pages at the end of the book
/// @arg {list} $compositePages - each element in this must contain a `name` and `source`
/// @arg {string} $sectionHeaderNode - a String whose value is "sectionHeaderNode" (yep, odd). Currently Unused (because of typo)
/// @group compose
@mixin compose_createChapterComposites($compositePages, $sectionHeaderNode) {
  // Validate
  @include validate_type($compositePages, list);

  @each $page in $compositePages {
    @include _createChapterComposite($page, $sectionHeaderNode);
  }
}

/// Collects elements defined by `$page.source` (a selector-ish thing) and
/// collates them at the end of a chapter.
/// @arg {Map} $page - contains `name`, `source`, and optionally `sortBy` and `compoundComposite` and `specialPageType`
/// @arg {string} $sectionHeaderNode - Curently Unused (because of typo)
/// @group compose
@mixin _createChapterComposite($page, $sectionHeaderNode) {
  $className: map-get($page, className);
  $sortBy: map-get($page, sortBy);
  $compoundComposite: map-get($page, compoundComposite);
  $specialPageType: map-get($page, specialPageType);

  // Validate
  @include validate_type($className, string);
  @include validate_typeOptional($sortBy, string);
  @include validate_typeOptional($compoundComposite, bool);
  @include validate_type($sectionHeaderNode, string);
  @include validate_enumOptional($specialPageType, $PAGE__PREFIX__);

  div[data-type="chapter"] {
    string-set: chap-id attr(id);
    @if (not $compoundComposite) {
      $clusterBy: map-get($page, clusterBy);
      @include validate_enum($clusterBy, $CLUSTER__PREFIX__);

      $keyName: if($specialPageType == $PAGE_GLOSSARY, 'glossary', '.#{$className}');
      $sourceSelector: if($specialPageType == $PAGE_GLOSSARY, 'div[data-type="#{$className}"] dl', 'section.#{$className}');
      @if ($specialPageType == $PAGE_GLOSSARY) {
        div[data-type="#{$className}"] {
          /* Discard this Page-specific glossary because it is collated later and the title is added when this is collated */
          move-to: trash;
        }
      }
      @if release-flag-enabled(EOCsection-links) {
        @if ($clusterBy == $CLUSTER_SECTION) {
          [data-type="page"] {
            > [data-type="document-title"] {
              string-set: moduleTitleId attr(id);
            }
          }
        }
      }
      #{$sourceSelector} {
        > [data-type="title"] {
          /* Discard this Page-specific title because a chapter title is added when collated */
          move-to: trash;
        }
        @if ($clusterBy == $CLUSTER_SECTION) {
          @if release-flag-enabled(EOCsection-links) {
            &::before {
              container: a;
              attr-href: "#" string(moduleTitleId);
              content: nodes(sectionHeaderNode);
            }
          } @else {
             /* TODO: Is this used? because it looks like there is a typo here. `sectionHeaderNode` is not defined */
             content: nodes(sectionHeaderNode) content();
          }
        }
        move-to: #{$className}-TOCOMPOSITE;
      }
      &::after {
        container: div;
        content: pending(#{$className}-TOCOMPOSITE);
        class: "os-eoc os-#{$className}-container";
        data-type: "composite-page";
        data-uuid-key: "#{$keyName}";
        // this needs to be reworked to work see https://github.com/Connexions/cnx-easybake/issues/97
        // @if release-flag-enabled(toc-comp-page-linking) {
        //   attr-id: "#{$className}" string(chap-id);
        // }
        @if ($sortBy != null) {
          sort-by: #{$sortBy}, nocase;
        }
      }
    }
  }
}

/// @see {mixin} _prepBookComposite
/// @group compose
@mixin compose_prepBookComposites($compositePages, $sectionHeaderNode, $sectionHeaderString) {
  @each $page in $compositePages {
    @include _prepBookComposite($page, $sectionHeaderNode, $sectionHeaderString);
  }
}

/// Prepares elements that need to be collated.
/// For example:
/// - a `[data-type="term"]` is copied and put into the the "bucket" for the end-of-book index.
/// - collated sections are moved into their corresponding "bucket"
///
/// @arg {Map} $page - contains `name`, `source`, and optionally `compoundComposite` and `specialPageType`
/// @arg {string} $sectionHeaderNode - Currently Unused (because of typo)
/// @arg {string} $sectionHeaderString - Optional, used when `specialPageType` is `$PAGE_INDEX`
/// @group compose


//TODO: verify that the empty chapter areas are not displayed, currently working better than previous commit but still displays empty sections. The exercises are empty, why?
//TODO: Optional, try to use isCompoundCompsite instad of loop inside a loop

@mixin _processComposites ($allCompoundCompositePages) {
  [data-type="chapter"] {
    [data-type="page"] {
      > [data-type="document-title"] {
        node-set: CompoundSectionHeaderNode;
      }
    }
    @each $page in $allCompoundCompositePages {
      $className: map-get($page, className);
      $pageName: map-get($page, name);
      $clusterBy: map-get($page, clusterBy);
      $specialPageType: map-get($page, specialPageType);
      $sortBy: map-get($page, sortBy);
      @include validate_enum($clusterBy, $CLUSTER__PREFIX__);
      $keyName: if($specialPageType == $PAGE_GLOSSARY, 'glossary', '.#{$className}');
      $sourceSelector: if($specialPageType == $PAGE_GLOSSARY, 'div[data-type="#{$className}"] dl', 'section.#{$className}');
      @if ($specialPageType == $PAGE_GLOSSARY) {
        div[data-type="#{$className}"] {
          /* Discard this Page-specific glossary because it is collated later and the title is added when this is collated */
          move-to: trash;
        }
      }
      @if release-flag-enabled(EOCsection-links) {
        @if ($clusterBy == $CLUSTER_SECTION) {
          [data-type="page"] {
            > [data-type="document-title"] {
              string-set: moduleTitleId attr(id);
            }
          }
        }
      }
      #{$sourceSelector} {
        > [data-type="title"] {
          move-to: trash;
        }
        @if ($clusterBy == $CLUSTER_SECTION) {
          @if release-flag-enabled(EOCsection-links) {
            &::before {
              container: a;
              attr-href: "#" string(moduleTitleId);
              content: nodes(CompoundSectionHeaderNode);
            }
          } @else {
            content: nodes(CompoundSectionHeaderNode) content();
          }
        }
        move-to: #{$className}-DESTINATION;
      }
      &::after {
        class: "os-eoc os-#{$className}-container";
        content: pending(#{$className}-DESTINATION);
        data-type: composite-page;
        data-uuid-key: "#{$keyName}";
        @if ($sortBy != null) {
          sort-by: #{$sortBy}, nocase;
        }
      }
    }
  }
}

@mixin compose_moveSectionSeparted($allCompoundCompositePages) {
  @each $page in $allCompoundCompositePages {
    $childPages: map-get($page, childPages);
    @each $page in $childPages {
      $className: map-get($page, className);
      $clusterBy: map-get($page, clusterBy);
      $specialPageType: map-get($page, specialPageType);
      $sourceSelector: if($specialPageType == $PAGE_GLOSSARY, 'div[data-type="#{$className}"] dl', 'section.#{$className}');
      @if ($clusterBy == $CLUSTER_SECTION) {
        .os-eoc.os-#{$className}-container  {
          #{$sourceSelector} {
            move-to: #{$className}-separated;
            &:deferred::after {
              class: "os-section-area";
              content: pending(#{$className}-separated);
              move-to: #{$className}-sectionSeparatedContainer;
            }
          }
          &::after {
            class: os-#{$className};
            content: pending(#{$className}-sectionSeparatedContainer);
          }
        }
      }
    }
  }
}

@mixin compose_prepEOCcompoundCompositesPages ($prepAllComposites) {
  @each $page in $prepAllComposites {
    $name: map-get($page, name);
    $className: map-get($page, className);
    $childPages: map-get($page, childPages);
    $specialPageType: map-get($page, specialPageType);
    $keyName: if($specialPageType == $PAGE_GLOSSARY, 'glossary', '.#{$className}');

    @include validate_type($childPages, list);
    @include validate_enumOptional($specialPageType, $PAGE__PREFIX__);

    @include _processComposites($childPages);
  }
}
@mixin compose_EOCcompoundCompositesPages ($getAllComposites) {
  @each $page in $getAllComposites {
    $className: map-get($page, className);
    $specialPageType: map-get($page, specialPageType);
    $childPages: map-get($page, childPages);
    @include validate_type($childPages, list);
    @include validate_enumOptional($specialPageType, $PAGE__PREFIX__);

    $keyName: if($specialPageType == $PAGE_GLOSSARY, 'glossary', '.#{$className}');

    @if release-flag-enabled(several-composite-chapters) {
      [data-type="chapter"] {
        @each $childPage in $childPages {
          $childclassName: map-get($childPage, className);
          .os-#{$childclassName}-container {
            move-to: composite-#{$className}-DESTINATION;
          }
        }
        &::after {
            class: "os-eoc os-#{$className}-container";
            data-type: composite-chapter;
            data-uuid-key: "#{$keyName}";
            content: pending(composite-#{$className}-DESTINATION);
          }
      }
    } @else {
      @each $childPage in $childPages {
        $childclassName: map-get($childPage, className);
        [data-type="chapter"] {
          .os-#{$childclassName}-container {
            move-to: composite-DESTINATION;
          }
          &::after {
            class: "os-eoc os-#{$className}-container";
            data-type: composite-chapter;
            data-uuid-key: "#{$keyName}";
            content: pending(composite-DESTINATION);
          }
        }
      }
    }
  }
}

 @mixin _prepBookComposite($page, $sectionHeaderNode, $sectionHeaderString) {
  $className: map-get($page, className);
  $compoundComposite: map-get($page, compoundComposite);
  $specialPageType: map-get($page, specialPageType);

  // Validate
  @include validate_type($className, string);
  @include validate_typeOptional($compoundComposite, bool);
  @include validate_type($sectionHeaderString, string);
  @include validate_enumOptional($specialPageType, $PAGE__PREFIX__);

  @if (not $compoundComposite) {
    @if ($specialPageType == $PAGE_INDEX) {
      $sourceSelector: 'div[data-type="page"] span[data-type="term"], div[data-type="composite-page"] span[data-type="term"]';
      #{$sourceSelector} {
        @include _buildIndexTerms($className, $sectionHeaderString);
      }
    } @else if ($specialPageType == $PAGE_INDEX_PARTIAL) {
      $indexType: map-get($page, indexType);
      $isDefault: map-get($page, defaultIndex);

      $sourceSelector: 'div[data-type="page"] span[data-type="term"][cxlxt|index="#{$indexType}"], div[data-type="composite-page"] span[data-type="term"][cxlxt|index="#{$indexType}"]';
      #{$sourceSelector} {
        @include _buildIndexTerms($className, $sectionHeaderString);
      }

      @if ($isDefault) {
        $sourceSelector: 'div[data-type="page"] span[data-type="term"]:not([cxlxt|index]), div[data-type="composite-page"] span[data-type="term"]:not([cxlxt|index])';
        #{$sourceSelector} {
          @include _buildIndexTerms($className, $sectionHeaderString);
        }
      }
    } @else {
      $sourceSelector: if($specialPageType == $PAGE_CITATIONS, '[data-type="note"].#{$className}', 'section.#{$className}');
      $clusterBy: map-get($page, clusterBy);
      $chapterPages: map-get($page, chapterPages);
      $keyName: if($specialPageType == $PAGE_GLOSSARY, 'glossary', '.#{$className}');

      // Validate
      @include validate_typeOptional($chapterPages, bool);
      @include validate_enum($clusterBy, $CLUSTER__PREFIX__);

      [data-type="chapter"] {
        #{$sourceSelector} {
          > h3[data-type="title"] {
            move-to: trash;
          }
          @if ($clusterBy == $CLUSTER_SECTION) {
            content: nodes(sectionHeaderNode) content();
            move-to: #{$className}-TOCOMPOSITE;
          } @else if ($clusterBy == $CLUSTER_CHAPTER) {
              move-to: #{$className}-GETCHAPTER;
            } @else {
              move-to: #{$className}-TOCOMPOSITE;
            }
        }
        @if ($clusterBy == $CLUSTER_CHAPTER) {
          >[data-type="document-title"] {
            //based on Econ References, only the chapter text is needed. We might need to extend this mixin to allow for more than just the text value of a chapter title.
            .os-text {
              node-set: chapterTitle;
            }
            &::after {
              container: h3;
              data-type: document-title;
              content: nodes(chapterTitle);
              move-to: chapterTitleHeaderText;
            }
          }
          &::after {
            class: "os-chapter-area";
            content: pending(chapterTitleHeaderText) pending(#{$className}-GETCHAPTER);
            move-to: #{$className}-TOCOMPOSITE;
            @if ($chapterPages) {
              data-type: "composite-page";
              data-uuid-key: "#{$keyName}";
            }
          }
        }
      }
    }
  }
}

@mixin _buildIndexTerms($className, $sectionHeaderString) {
  // Create an index entry for the term by creating a new element and then moving it
  &::after {
    // i18n: use the @reference="..." version of a term when adding it to the Index (if the attribute is available). See #353
    content: attr(#{"cmlnle|reference"}, content());
    attr-group-by: attr(group-by);
    container: span;
    class: "os-term";
    move-to: index-term;
  }
  &::after {
    content: string($sectionHeaderString);
    container: span;
    class: "os-term-section";
    move-to: index-section;
  }
  // Create a link next to the index term which points to the term in the book
  // Make sure there is a space between each link
  // HACK: generate a span that only contains a comma and a space, the last-child one must be removed on the next pass. See modify_trash('.os-index-link-separator:last-child') in book.scss
  &::after {
    container: a;
    content: pending(index-section);
    attr-href: "#" attr(id);
    class: "os-term-section-link";
    move-to: index-section-link
  }
  &::after {
    container: span;
    content: ', ';
    class: "os-index-link-separator";
    move-to: index-section-link;
  }
  &::after {
    content: pending(index-term) pending(index-section-link);
    class: os-index-item;
    move-to: #{$className}-TOCOMPOSITE;
  }
}

/// @see {mixin} _createBookComposite
/// @group compose
@mixin compose_createBookComposites($compositePages) {
  @each $page in $compositePages {
    @include _createBookComposite($page);
  }
}

/// Collects elements defined by `$page.source` (a selector-ish thing) and
/// collates them at the end of the book.
/// @arg {Map} $page - contains `source`, and optionally `specialPageType`
/// @group compose
@mixin _createBookComposite($page) {
  body {
    $className: map-get($page, className);
    $specialPageType: map-get($page, specialPageType);
    $clusterBy: map-get($page, clusterBy);
    // Validate
    @include validate_type($className, string);
    @include validate_enumOptional($specialPageType, $PAGE__PREFIX__);
    @include validate_enum($clusterBy, $CLUSTER__PREFIX__);


    $keyName: if($specialPageType == $PAGE_INDEX, 'index', '.#{$className}');

    &::after {
      container: div;
      content: pending(#{$className}-TOCOMPOSITE);
      class: "os-eob os-#{$className}-container";
      data-type: "composite-page";
      data-uuid-key: "#{$keyName}";
      // this needs to be reworked to work, see https://github.com/Connexions/cnx-easybake/issues/97
      // @if release-flag-enabled(toc-comp-page-linking) {
      //   attr-id: "#{$className}" string(chap-id);
      // }
      @if ($specialPageType == $PAGE_INDEX or $specialPageType == $PAGE_INDEX_PARTIAL) {
        group-by: span, "span::attr(group-by)", nocase;
      }
    }
  }
}

/// Creates a set of exercise solutions at the end of a chapter
/// @arg {list} $compositePages
/// @arg {Map} $solutionPage
/// @arg {string} $sectionHeaderNode
/// @group compose
@mixin compose_createEOCSolutions($compositePages, $solutionPage, $sectionHeaderNode) {
  $solutionClassName: map-get($solutionPage, className);
  $clusterBy: map-get($solutionPage, clusterBy);

  // Validate
  @include validate_type($solutionClassName, string);
  @include validate_enum($clusterBy, $CLUSTER__PREFIX__);


  @each $page in $compositePages {
    $hasSolutions: map-get($page, hasSolutions);
    $className: map-get($page, className);

    // Validate
    @include validate_type($className, string);
    @include validate_typeOptional($hasSolutions, bool);

    @if ($hasSolutions) {
      [data-type="chapter"] {
        .os-eoc.os-#{$className}-container {
          [data-type="solution"] {
            @if ($clusterBy == $CLUSTER_SECTION) {
              move-to: #{$solutionClassName}-GETSECTION;
            } @else {
              move-to: #{$solutionClassName}-TOCOMPOSITE;
            }
          }
          @if ($clusterBy == $CLUSTER_SECTION) {
            &::after {
              container: section;
              class: os-#{$solutionClassName};
              content: nodes($sectionHeaderNode) pending(#{$solutionClassName}-GETSECTION);
              move-to: #{$solutionClassName}-TOCOMPOSITE;
            }
          }
        }
      }
    }
  }

  [data-type="chapter"] {
    &::after {
      container: div;
      content: pending(#{$solutionClassName}-TOCOMPOSITE);
      class: "os-eoc os-#{$solutionClassName}-container";
      data-type: "composite-page";
      data-uuid-key: "solutions";
    }
  }
}


/// Create solutions at the end of the book (by creating a new collated Page).
/// These can be separated by section, chapter, both, or none.
///
/// When they are separated by chapter/section a new element is created with the Chapter/Section title.
///
/// Additionally, if `clusterBy` is `$CLUSTER_SECTION` for the EOB composite page,
/// the originating EOC section must also be `$CLUSTER_SECTION`.
///
/// @arg {list} $compositePages - each element contains `source` and `hasSolutions`
/// @arg {Map} $solutionPage - contains `source`, `clusterBy`
/// @arg {string} $sectionHeaderNode
/// @group compose
@mixin compose_createEOBSolutions($compositeSections, $compositePages, $notes, $solutionPage, $sectionHeaderNode) {
  $solutionClassName: map-get($solutionPage, className);
  $clusterBy: map-get($solutionPage, clusterBy);
  
  // Validate
  @include validate_type($solutionClassName, string);
  @include validate_enum($clusterBy, $CLUSTER__PREFIX__);

  @each $note in $notes {
    $hasSolutions: map-get($note, hasSolutions);
    $resetAt: map-get($note, resetAt);


    @include validate_typeOptional($hasSolutions, bool);

    @if $hasSolutions {
      $noteTitle: 'Null Title';
      $noteLabelText: map-get($note, labelText);
      $noteTitleContent: map-get($note, titleContent);
      @if $noteLabelText {
        $noteTitle: $noteLabelText;
      }
      @else if $noteTitleContent{
        $noteTitle: map-get($noteTitleContent, os-title-label);
      }
      $className: map-get($note, className);

      // Validate
      @include validate_type($noteTitle, string);
      @include validate_type($className, string);


      [data-type="chapter"] {
        @if ($resetAt == moduleReset) and release-flag-enabled(module-titled-notes) {
          [data-type="page"]:not(.introduction) {
            //do we want to set only the number and reconstruct "section + secion number or should we just string-set the whole title for the module?
            // [data-type="document-title"] .os-number {
            //   string-set: sectionNumber content();
            // }
            [data-type="note"].#{$className} [data-type="solution"] {
              move-to: note-#{$className}-#{$solutionClassName}-GETSECTION;
            }
            
            &::after {
              content: nodes($sectionHeaderNode);
              move-to: moduleTitleName;
            }
            &::after {
              container: div;
              class: "os-solution-area";
              content: pending(moduleTitleName) pending(note-#{$className}-#{$solutionClassName}-GETSECTION);
              move-to: note-#{$solutionClassName}-SECTIONS;
            }
          }
          &::before {
            container: span;
            class: "os-title-label";
            content: $noteTitle;
            move-to: note-#{$className}-title;
          }
          &::before {
            container: h3;
            @if release-flag-enabled(answer-key-h3) {
              attr-data-type: "title";
            }
            content: pending(note-#{$className}-title);
            move-to: note-#{$className}-header;
          }
          &::after {
            class: "os-#{$className}-solution-area os-module-reset-solution-area";
            content: pending(note-#{$className}-header)  pending(note-#{$solutionClassName}-SECTIONS);
            move-to: note-#{$solutionClassName}-GETCHAPTER;
          }
        } @else {
          [data-type="note"].#{$className} [data-type="solution"] {
            move-to: note-#{$className}-#{$solutionClassName}-GETSECTION;
          }
          &::before {
            container: span;
            class: "os-title-label";
            content: $noteTitle;
            move-to: note-#{$className}-title;
          }
          &::before {
            container: h3;
            @if release-flag-enabled(answer-key-h3) {
              attr-data-type: "title";
            }
            content: pending(note-#{$className}-title);
            move-to: note-#{$className}-header;
          }
          &::after {
            container: div;
            class: "os-solution-area";
            content: pending(note-#{$className}-header) pending(note-#{$className}-#{$solutionClassName}-GETSECTION);
            move-to: note-#{$solutionClassName}-GETCHAPTER;
          }
        }
      }
    }
  }
  @each $section in $compositeSections {
    $hasSolutions: map-get($section, hasSolutions);
    $className: map-get($section, className);
    $sectionName: map-get($section, name);
    $titleContent: map-get($section, titleContent);
     // Validate
    @include validate_typeOptional($hasSolutions, bool);

    @if ($sectionName != null) {
       @include validate_type($sectionName, string);
    }
    @else {
      $sectionName: ();
      @each $elementClass in map-keys($titleContent) {
        $sectionName: append($sectionName, map-get($titleContent, $elementClass));
      }
    }

    @if $hasSolutions {
     [data-type="chapter"] { .os-eos.os-#{$className}-container {
         @if ($clusterBy == $CLUSTER_SECTION) {
           [data-type="solution"] {
             move-to: #{$className}-#{$solutionClassName}-GETSECTION;
           }
           &::after {
             container: span;
             content: $sectionName;
             class: "os-title-label";
             move-to: #{$className}-title
           }
           &::after {
             container: h3;
             @if release-flag-enabled(answer-key-h3) {
              attr-data-type: "title";
            }
             content: pending(#{$className}-title);
             move-to: #{$className}-header;
           }
           &::after {
             container: div;
             class: "os-solution-area";
             content: pending(#{$className}-header) pending(#{$className}-#{$solutionClassName}-GETSECTION);
             move-to: #{$solutionClassName}-GETCHAPTER;
           }
         } @else if ($clusterBy == $CLUSTER_CHAPTER) {
           [data-type="solution"] {
             move-to: #{$solutionClassName}-GETCHAPTER;
           }
         } @else {
           [data-type="solution"] {
             move-to: #{$solutionClassName}-TOCOMPOSITE;
           }
         }
       }
     }
   }
 }

  @each $page in $compositePages {
    $hasSolutions: map-get($page, hasSolutions);
    $className: map-get($page, className);
    $pageName: map-get($page, name);
    $childPages: map-get($page, childPages);

    // Validate
    @include validate_typeOptional($hasSolutions, bool);
    @include validate_type($className, string);
    @include validate_type($pageName, string);

    @if $hasSolutions {
      [data-type="chapter"] {
        .os-eoc.os-#{$className}-container {
          @if ($clusterBy == $CLUSTER_SECTION) {
            @if $childPages {
              @each $child in $childPages {
                $cHasSolutions: map-get($child, hasSolutions);
                $cClassName: map-get($child, className);
                $cPageName: map-get($child, name);

                // Validate
                @include validate_typeOptional($cHasSolutions, bool);
                @include validate_type($cClassName, string);
                @include validate_type($cPageName, string);

                @if $cHasSolutions {
                  .os-#{$cClassName}-container {
                    [data-type="solution"] {
                      move-to: #{$cClassName}-#{$solutionClassName}-GETSECTION;
                    }
                    &::after {
                      container: span;
                      content: $cPageName;
                      class: "os-title-label";
                      move-to: #{$cClassName}-title
                    }
                    &::after {
                      container: h3;
                      @if release-flag-enabled(answer-key-h3) {
                        attr-data-type: "title";
                      }
                      content: pending(#{$cClassName}-title);
                      move-to: #{$cClassName}-header;
                    }
                    &::after {
                      container: div;
                      class: "os-solution-area";
                      content: pending(#{$cClassName}-header) pending(#{$cClassName}-#{$solutionClassName}-GETSECTION);
                      move-to: #{$solutionClassName}-GETCHAPTER;
                    }
                  }
                }
              }
            } @else {
              [data-type="solution"] {
                move-to: #{$className}-#{$solutionClassName}-GETSECTION;
              }
              &::after {
                container: span;
                content: $pageName;
                class: "os-title-label";
                move-to: #{$className}-title
              }
              &::after {
                container: h3;
                @if release-flag-enabled(answer-key-h3) {
                  attr-data-type: "title";
                }
                content: pending(#{$className}-title);
                move-to: #{$className}-header;
              }
              &::after {
                container: div;
                class: "os-solution-area";
                content: pending(#{$className}-header) pending(#{$className}-#{$solutionClassName}-GETSECTION);
                move-to: #{$solutionClassName}-GETCHAPTER;
              }
            }
          } @else if ($clusterBy == $CLUSTER_CHAPTER) {
            [data-type="solution"] {
              move-to: #{$solutionClassName}-GETCHAPTER;
            }
          } @else {
            [data-type="solution"] {
              move-to: #{$solutionClassName}-TOCOMPOSITE;
            }
          }
        }
      }
    }
  }
  [data-type="chapter"] {
    > h1[data-type="document-title"]  {
      .os-number {
        string-set: ChapNum content();
      }
      .os-part-text {
        string-set: ChapText content();
      }
    }
    @if $Config_hasCompositeChapter {
      &::after {
        container: span;
        class: "os-text";
        content: $Config_EOBSolutionsChapterSectionTitle;
        move-to: eobCompositeTitlesContent;
      }
      &::after {
        content: pending(eobCompositeTitlesContent) pending(note-#{$solutionClassName}-GETCHAPTER) pending(#{$solutionClassName}-GETCHAPTER);
        class: "os-eob os-#{$solutionClassName}-container";
        data-type: "composite-page";
        data-uuid-key: ".#{$solutionClassName}" string(ChapNum);
        move-to: #{$solutionClassName}-TOCOMPOSITECHAPTER;
      }
    } @else {
      &::after {
        //FIXME wrap the in spans
        container: h2;
        class: "os-title";
        content: $Config_EOBSolutionsChapterSectionTitle;
        move-to: chaptTitleEOB;
      }
      &::after {
        class: os-chapter-area;
        content: pending(chaptTitleEOB) pending(note-#{$solutionClassName}-GETCHAPTER) pending(#{$solutionClassName}-GETCHAPTER);
        move-to: #{$solutionClassName}-TOCOMPOSITE;
      }
    }
  }
  body {
      &::after {
      content: pending(#{$solutionClassName}-TOCOMPOSITECHAPTER);
      class: "os-eob os-#{$solutionClassName}-container";
      @if $Config_hasCompositeChapter {
        data-type: "composite-chapter";
      } @else {
        data-type: "composite-page";
      }
      data-uuid-key: ".#{$solutionClassName}"; /* TODO: Is this the correct key? We'll be stuck with it because it is used for generating the collated page uuid's */
    }
  }
}

//todo: add mixin for abstract from metadata. Can be by itself, can be mixed with chapter titles.

/// older books use the metadata to build a chapter outline section in the intro module. It must be created at the chapter level then moved.
@mixin compose_chapterOutline($outlineTitle, $hasLearningObjectives: false) {
  [data-type="chapter"] [data-type="page"]:not(.introduction) {
    > [data-type="document-title"] {
      string-set: outlinePageId attr(id);
      &::after {
        container: a;
        class: "os-chapter-objective";
        content: content();
        attr-href: "#" string(outlinePageId);
        move-to: chapOutlineLink;
      }
    }
    @if $hasLearningObjectives {
      //abstract selector found in college physics
      //should be removed when content is later updated
      [data-type="abstract"] {
        move-to: outlineAbstract;
      }
      section.learning-objectives > ul {
        move-to: LO;
      }
      &::after {
        class:"learning-objective";
        content: pending(outlineAbstract) pending(LO);
        move-to: outlineLO;
      }
      section.learning-objectives:deferred {
        move-to: trash;
      }
    }
    &::after {
      class: "os-chapter-objective";
      content: pending(chapOutlineLink) pending(outlineLO);
      move-to: chapOutline;
    }
  }
  [data-type="chapter"] {
    &::before {
      container: h3;
      class: "os-title";
      content: $outlineTitle;
      move-to: chapOutlineTitle;
    }
    &:deferred::before {
      class: "os-chapter-outline";
      content: pending(chapOutlineTitle) pending(chapOutline);
    }
  }
}

@mixin compose_handbookOutline($handbookOutlineTitle) {
  .handbook {
    > section {
      > [data-type="title"] {
        string-set: outlineSectionId attr(id);
        &::after {
          container: a;
          class: "os-handbook-objective";
          content: content();
          attr-href: "#" string(outlineSectionId);
          move-to: handbookOutlineLink;
        }
      }
      &::after {
        class: "os-handbook-objective";
        content: pending(handbookOutlineLink);
        move-to: handbookOutline;
      }
    }
    &::before {
      container: h3;
      class: "os-title";
      content: $handbookOutlineTitle;
      move-to: handbookOutlineTitle;
    }
    &:deferred::before {
      class: "os-handbook-outline";
      content: pending(handbookOutlineTitle) pending(handbookOutline);
    }
  }
}

@mixin compose_moveHandbookOutline() {
  .handbook {
    > .os-handbook-outline {
      move-to: HandbookOutline;
    }
    > section {
      move-to: HandbookSection;
    }
    &:deferred {
      content: content() pending(HandbookOutline) pending(HandbookSection);
    }
  }
}

/// move the chapter objectives to the intro module

@mixin compose_moveChapterOutline() {
  .os-chapter-outline {
    move-to: ChapterOutline;
  }
  .introduction {
    content: pending(ChapterOutline) content();
  }
}

//moves .splash.unnumbered into .os-figure.has-splash
//moves splash caption into .os-caption-container
//curently unnumbered splashes are only found in corn/coreq styled books, but we should support in all recipes
@mixin compose_UnnumberedSplash {
  [data-type="page"].introduction {
    figure.splash.unnumbered {
      move-to: splash;
      figcaption {
        class: "os-caption";
        container: span;
        move-to: os-caption;
      }
      &::after {
        content: pending(os-caption);
        move-to: splashCaption;
        class: "os-caption-container";
      }
    }
    &:deferred {
      &::before {
        class: "os-figure has-splash";
        content: pending(splash) pending(splashCaption)
      }
    }
  }
}
