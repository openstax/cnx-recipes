@import "./utils";

@mixin number_numberChapters($chapterTitleContent) {
  div[data-type="chapter"] {
    @include utils_title($chapterTitleContent, bChapterLabel);
    //use the title mixin for this? and that way content() can be wrapped
    > [data-type="document-title"] {
      container: h1;
      content: pending(bChapterLabel) content();
    }
  }
}
@mixin number_numberUnits($unitTitleContent) {
  div[data-type="unit"] {
    @include utils_title($unitTitleContent, bUnitLabel);
    //use the title mixin for this? and that way content() can be wrapped
    > [data-type="document-title"] {
      container: h1;
      content: pending(bUnitLabel) content();
    }
  }
}

@mixin number_numberAppendices($appendixTitleContent) {
  div.appendix {
    @include utils_title($appendixTitleContent, bAppendixLabel);
    //use the title mixin for this? and that way content() can be wrapped
    > [data-type="document-title"] {
      container: h1;
      content: pending(bAppendixLabel) content();
    }
  }
}

@mixin number_numberSections($sectionTitleContent) {
  div[data-type="chapter"] > div[data-type="page"] {
    &:not(.introduction) {
      @include utils_title($sectionTitleContent, bSectionLabel);
      //use the title mixin for this? and that way content() can be wrapped
      > [data-type="document-title"] {
        container: h2;
        content: pending(bSectionLabel) content();
      }
    }
    &.introduction {
      > [data-type="document-title"] {
        container: h2;
      }
    }
  }
}

@mixin number_numberHandbookSections($handbookSectionTitleContent) {
  .handbook > section {
    @include utils_title($handbookSectionTitleContent, bHandbookSectionLabel);
    > [data-type="title"] {
      container: h2;
      content: pending(bHandbookSectionLabel) content();
    }
  }
}

/// This has to run before number_numberEOCExercises because its selector is more general
/// @group number

@mixin number_numberContentExercises($exerciseTitleContent, $solutionTitleContent, $exerciseTitleContentAp, $solutionTitleContentAp) {
  [data-type="chapter"] [data-type="page"] [data-type="exercise"]:not(.unnumbered):not(.os-hasStimulus):not(.os-coreq-exercises) {
    @if $exerciseTitleContent {
      [data-type="problem"] {
        @include utils_title($exerciseTitleContent);
      }
    }
    @if $solutionTitleContent {
      [data-type="solution"] {
        @include utils_title($solutionTitleContent);
      }
    }
  }
  .appendix [data-type="exercise"]:not(.unnumbered) {
    @if $exerciseTitleContentAp {
      [data-type="problem"] {
        @include utils_title($exerciseTitleContentAp);
      }
    }
    @if $solutionTitleContentAp {
      [data-type="solution"] {
        @include utils_title($solutionTitleContentAp);
      }
    }
  }

}
@mixin number_numberStimulusExercises($exerciseTitleContent) {
  [data-type="chapter"] [data-type="page"] [data-type="exercise"].os-hasStimulus [data-type="problem"] .os-problem-container > div:not(.exercise-stimulus) {
        @include utils_title($exerciseTitleContent);
  }
}
@mixin number_numberCoreqExercises($exerciseTitleContent) {
  [data-type="page"] section.coreq-skills [data-type="exercise"].os-coreq-exercises [data-type="problem"] {
    @include utils_title($exerciseTitleContent);
  }
}
//EOS composite pages must be created before this runs
@mixin number_numberEOSExercises($exerciseTitleContent, $solutionTitleContent) {
  .os-eos [data-type="exercise"] {
    [data-type="problem"] {
      @include utils_title($exerciseTitleContent);
    }
    [data-type="solution"] {
      @include utils_title($exerciseTitleContent);
    }
  }
}

//EOC composite pages must be created before this runs
@mixin number_numberEOCExercises($exerciseTitleContent, $solutionTitleContent) {
  .os-eoc [data-type="exercise"] {
    [data-type="problem"] {
      @include utils_title($exerciseTitleContent);
    }
    [data-type="solution"] {
      @include utils_title($exerciseTitleContent);
    }
  }
}

@mixin number_numberContentExamples($exampleTitleContent, $solutionTitleContent, $hasCommentary, $solutionNumberedTitleContent) {
  $mainSolutionSelector: ''; //defined below; depends on whether $solutionNumberedTitleContent exists

  @if release-flag-enabled(subtitled-examples) {
    [data-type="example"] {
      @include utils_title($exampleTitleContent, bExampleLabel);
      &::after {
        container: div;
        content: pending(bExampleLabel);
        class: "os-title";
        move-to: bExampleHeader;
      }
      &:deferred {
        content: pending(bExampleHeader) content();
      }
      @if $solutionNumberedTitleContent {
        $mainSolutionSelector: '[data-type="solution"].unnumbered';
  
        [data-type="solution"]:not(.unnumbered) {
          @include utils_title($solutionNumberedTitleContent, null, div, "solution-title");
        }
      } @else {
        $mainSolutionSelector: '[data-type="solution"]';
      }
      #{$mainSolutionSelector} {
        @include utils_title($solutionTitleContent, null, div, "solution-title");
      }
      @if $hasCommentary == true {
        [data-type="commentary"] {
          > [data-type="title"] {
            &::inside {
              container: span;
              class: "os-title-label";
            }
            &::deferred {
              container: div;
              data-type: "commentary-title";
            }
          }
        }
      }
    }
  } @else {
    [data-type="example"] {
      @include utils_title($exampleTitleContent, bExampleLabel);
      > [data-type="title"] {
        //BAD: there should not be titling content creation outside the book level. This should get moved
        $exampleTitle: (
          os-text: content()
        );
        @include utils_title($exampleTitle, bExampleLabel);
        move-to: trash;
      }
      &::after {
        container: div;
        content: pending(bExampleLabel);
        class: "os-title";
        move-to: bExampleHeader;
      }
      &:deferred {
        content: pending(bExampleHeader) content();
      }
      @if $solutionNumberedTitleContent {
        $mainSolutionSelector: '[data-type="solution"].unnumbered';
  
        [data-type="solution"]:not(.unnumbered) {
          @include utils_title($solutionNumberedTitleContent, null, div, "solution-title");
        }
      } @else {
        $mainSolutionSelector: '[data-type="solution"]';
      }
      #{$mainSolutionSelector} {
        @include utils_title($solutionTitleContent, null, div, "solution-title");
      }
      @if $hasCommentary == true {
        [data-type="commentary"] {
          > [data-type="title"] {
            &::inside {
              container: span;
              class: "os-title-label";
            }
            &::deferred {
              container: div;
              data-type: "commentary-title";
            }
          }
        }
      }
    }
  }
}

/// A mixin for numbering custom examples
/// @arg {String} $customClass - string of the selector of the custom examples you want to number
/// @arg {Map} $exampleTitleContent - map with title parts for examples WITHOUT special class
/// @arg {Map} $exampleCustomTitleContent - map with title parts for examples WITH special class
/// @arg {Map} $solutionTitleContent - map with title parts for solution within example
/// @arg {Map} $commentaryTitleContent - map with title parts for commentary within example
/// @arg {Map} $solutionNumberedTitleContent - map with title parts for numbered solution within example (optional)
/// @group number
@mixin number_numberCustomExamples($customClass, $exampleTitleContent, $exampleCustomTitleContent, $solutionTitleContent, $hasCommentary, $solutionNumberedTitleContent) {
  $mainSolutionSelector: ''; //defined below; depends on whether $solutionNumberedTitleContent exists

  [data-type="example"] {
    &:not(.#{$customClass}) {
      @include utils_title($exampleTitleContent, bExampleLabel);
      &::after {
        container: div;
        content: pending(bExampleLabel);
        class: "os-title";
        move-to: bExampleHeader;
      }
      &:deferred {
        content: pending(bExampleHeader) content();
      }
    }
    &.#{$customClass} {
      @include utils_title($exampleCustomTitleContent, bExampleLabel);
      &::after {
        container: div;
        content: pending(bExampleLabel);
        class: "os-title";
        move-to: bExampleHeader;
      }
      &:deferred {
        content: pending(bExampleHeader) content();
      }
    }
    @if $solutionNumberedTitleContent {
      $mainSolutionSelector: '[data-type="solution"].unnumbered';

      [data-type="solution"]:not(.unnumbered) {
        @include utils_title($solutionNumberedTitleContent, null, div, "solution-title");
      }
    } @else {
      $mainSolutionSelector: '[data-type="solution"]';
    }
    #{$mainSolutionSelector} {
      @include utils_title($solutionTitleContent, null, div, "solution-title");
    }
    @if $hasCommentary == true {
      [data-type="commentary"] {
        > [data-type="title"] {
          &::inside {
            container: span;
            class: "os-title-label";
          }
          &::deferred {
            container: div;
            data-type: "commentary-title";
          }
        }
      }
    }
  }
}

@mixin number_numberSpecifiedExamples($exampleTitleContent, $solutionTitleContent, $hasCommentary, $appendixTitleContent, $solutionNumberedTitleContent) {
  [data-type="chapter"] {
    @include number_numberContentExamples($exampleTitleContent, $solutionTitleContent, $hasCommentary, $solutionNumberedTitleContent);
  }
  .appendix {
    @include number_numberContentExamples($appendixTitleContent, $solutionTitleContent, $hasCommentary, $solutionNumberedTitleContent);
  }
}

@mixin number_numberNote($type, $noteContent, $hasSolutions, $solutionTitleContent) {
  [data-type="note"].#{$type} {
    @include utils_title($noteContent, bNoteLabel-#{$type});
    > [data-type="title"] {
      //TODO: May want to have the option to preserve titles similarly to examples in the future.
      move-to: trash;
    }
    @if $hasSolutions {
      [data-type="solution"] {
        @include utils_title($solutionTitleContent)
      }
    }
    &::after {
      container: div;
      content: pending(bNoteLabel-#{$type});
      class: "os-title";
      move-to: bNoteHeader;
    }
    &:deferred {
      content: pending(bNoteHeader) content();
    }
    //TODO: Maybe want to have the option to handle solutions similarly to examples in the future
  }
}

@mixin number_setCaptions($setFigTableCaptions, $labeling, $labelingAp, $labelingPr: null, $labelingCustom: null) {
  $captionType:         map-get($setFigTableCaptions, captionType);
  $defaultContainer:    map-get($setFigTableCaptions, defaultContainer);
  $hasCaption:          map-get($setFigTableCaptions, hasCaption);
  $hasTitle:            map-get($setFigTableCaptions, hasTitle);
  $exceptionClassNames: map-get($setFigTableCaptions, exceptionClassNames);
  $customClass:         map-get($setFigTableCaptions, customClass);
  $hasTopTitle:         map-get($setFigTableCaptions, hasTopTitle);
  $hasTopCaption:       map-get($setFigTableCaptions, hasTopCaption);

  // $noTitleContent: (); // For the exceptions, this is the "titleContent" that will be used

  @include validate_enum($captionType, $CAPTION__PREFIX__);
  @include validate_typeOptional($exceptionClassNames, list);
  @include validate_typeOptional($hasTopCaption, bool);
  @include validate_typeOptional($customClass, string); // used when tables, figures are numbered in a custom way, depending on class
  // These selectors are of the form:
  // `table:not(.unnumbered):not(.custom1):not(.custom2)` (everything that is not an exception)
  // `table.unnumbered, table.custom1, table.custom2`     (everything that is an exception)
  $elementName: "INVALID_ELEMENT_NAME";
  @if $captionType == $CAPTION_TABLE {
    $elementName: "table";
  } @else if $captionType == $CAPTION_FIGURE {
    $elementName: "figure";
  } @else {
    @error "BUG: Invalid captionType '#{$captionType}'";
  }
  $notAnExceptionSelector: "#{elementName}";
  $exceptionsSelector: "";
  @if $exceptionClassNames {
    @each $item in $exceptionClassNames {
      @include validate_type($item, string);
      $notAnExceptionSelector: unquote("#{$notAnExceptionSelector}:not(.#{$item})");
      // Only add a comma if there is already an $exceptionsSelector
      @if $exceptionsSelector == "" {
        $exceptionsSelector: unquote("#{$elementName}.#{$item}");
      } @else {
        $exceptionsSelector: unquote("#{$exceptionsSelector}, #{$elementName}.#{$item}");
      }

    }
  }

  [data-type="chapter"] {
    :not(#{$elementName}) > #{$elementName}:not(.unnumbered) {
      @if $customClass {
        &:not(.#{$customClass}) {
          @include utils_title($labeling, bCaption);
        }
        &.#{$customClass} {
          @include utils_title($labelingCustom, bCaption);
        }
      } @else {
        @include utils_title($labeling, bCaption);
      }
      @if $captionType == $CAPTION_TABLE {
        @if ($hasTopTitle) {
          &.top-titled {
            //this will have to be rewritten after all the content has been updated to contain the title within the title instead of the hacky first header in the table.
            @if release-flag-enabled(table-move-fake-title) {
              thead tr:first-child th {
                container: div;
                class: "os-temporary-table-title";
                move-to: tableTopTitle;
              }
            } @else {
              thead tr:first-child {
                string-set: TopTitleContent content();
                move-to: trash;
              }
            }
          }
        } 
        @if ($hasTopCaption) {
          &.top-captioned {
            #{$defaultContainer} {
              [data-type="title"] {
                string-set: TopCaptionContent content();
                move-to: trash;
              }
              &:deferred {
                move-to: trash;
              }
            }
          }
        }
      }
      @include setCaptionsHelper($captionType, $defaultContainer, $hasCaption, $hasTitle, $hasTopTitle, $hasTopCaption);
    }
    @include trashUnnumberedCaption($elementName, $defaultContainer);
  }
  .appendix {
    :not(#{$elementName}) > #{$elementName}:not(.unnumbered),
    > #{$elementName}:not(.unnumbered) {
      @include utils_title($labelingAp, bCaption);
      @include setCaptionsHelper($captionType, $defaultContainer, $hasCaption, $hasTitle, $hasTopTitle, $hasTopCaption);
      @if ($hasTopTitle) {
        &.top-titled {
          //this will have to be rewritten after all the content has been updated to contain the title within the title instead of the hacky first header in the table.
          @if release-flag-enabled(table-move-fake-title) {
            thead tr:first-child th {
              container: div;
              class: "os-temporary-table-title";
              move-to: tableTopTitle;
            }
          } @else {
            thead tr:first-child {
              string-set: TopTitleContent content();
              move-to: trash;
            }
          }
        }
      }
    }
    @include trashUnnumberedCaption($elementName, $defaultContainer);
  }
  @if ($labelingPr != null) {
    .preface {
      :not(#{$elementName}) > #{$elementName}:not(.unnumbered) {
        @include utils_title($labelingPr, bCaption);
        @include setCaptionsHelper($captionType, $defaultContainer, $hasCaption, $hasTitle, $hasTopTitle, $hasTopCaption);
      }
      @include trashUnnumberedCaption($elementName, $defaultContainer);
    }
  }

 // /* The :not(#{$type}) is here because of subfigures (I think) */
  //[data-type="chapter"],
  //[data-type="chapter"] :not(#{$type}) {
//    > {
  //    #{$notAnExceptionSelector} {

        // If the figure/table has a caption/title then set a boolean
        // (essentially, implement `:has(caption)`)
        // hmm, this may not be possible in 1 pass

  //      @include utils_title($labeling, bCaption);
    //    @include setCaptionsHelper($type, $defaultContainer, $hasCaption, $hasTitle);
    //  }
      // A bug in easybake does not allow 2 selectors with `::outside` to match an element.
      // in hs-physics the `.key-terms` table is also marked as `.unnumbered`
      // see https://github.com/Connexions/cnx-easybake/issues/48
      //
      // TODO: Maybe these selectors can be simplified to just always call setCaptionsHelper
  //    @if $exceptionsSelector != "" {
    //    #{$exceptionsSelector} {
          // @include utils_title($noTitleContent, bCaption);
  //        @include setCaptionsHelper($type, $defaultContainer, $hasCaption, $hasTitle);
  //      }
  //    }
//      .unnumbered#{$notAnExceptionSelector} {
  //      @include setCaptionsHelper($type, $defaultContainer, $hasCaption, $hasTitle);
  //    }
  //  }
  //  @include trashUnnumberedCaption($type, $defaultContainer);
    // TODO: uncomment me but it will cause minor regressions in existing books: @include trashEmptyCaption($type, $defaultContainer);
//  }

//  .appendix,
//  .appendix :not(#{$type}) {
//    > {
//      #{$notAnExceptionSelector} {
//        @include utils_title($labelingAp, bCaption);
//        @include setCaptionsHelper($type, $defaultContainer, $hasCaption, $hasTitle);
//      }
      // A bug in easybake does not allow 2 selectors with `::outside` to match an element.
      // in hs-physics the `.key-terms` table is also marked as `.unnumbered`
      // see https://github.com/Connexions/cnx-easybake/issues/48
      //
      // TODO: Maybe these selectors can be simplified to just always call setCaptionsHelper
//      @if $exceptionsSelector != "" {
//        #{$exceptionsSelector} {
          // @include utils_title($noTitleContent, bCaption);
//          @include setCaptionsHelper($type, $defaultContainer, $hasCaption, $hasTitle);
//        }
//      }
//      .unnumbered#{$notAnExceptionSelector} {
//        @include setCaptionsHelper($type, $defaultContainer, $hasCaption, $hasTitle);
  //    }
  //  }
//    @include trashUnnumberedCaption($type, $defaultContainer);
    // TODO: uncomment me but it will cause minor regressions in existing books: @include trashEmptyCaption($type, $defaultContainer);
//  }
}


@mixin trashEmptyElement ($defaultContainer) {
  #{$defaultContainer}:empty {
    move-to: trash;
  }
}

/// Unnumbered captions are currently trashed (even if they contain content) because
/// of some contract that the XML teams had which stated something along the lines
/// of "If a table/figure is unnumbered then openstax will discard the caption"
@mixin trashUnnumberedCaption ($elementName, $defaultContainer) {
  > #{$elementName}.unnumbered {
    #{$defaultContainer} {
      move-to: trash;
    }
  }
}

@mixin setCaptionsHelper($captionType, $defaultContainer, $hasCaption, $hasTitle, $hasTopTitle, $hasTopCaption) {

  @if ($hasCaption) {
    #{$defaultContainer} {
      container: span;
      class: "os-caption";
      move-to: bCaptionContent;
    }
  }
  @if ($hasTitle) {
    // create divider span for title
    &::after {
      container: span;
      class: 'os-divider';
      content: ' ';
      move-to: bCaptionDivider;
    }

    @if ($captionType == $CAPTION_TABLE) {
      #{$defaultContainer} [data-type="title"] {
        container: span;
        class: "os-title";
        move-to: bCaptionTitle;
      }
    } @else if ($captionType == $CAPTION_FIGURE) {
      [data-type="title"] {
        container: span;
        class: "os-title";
        move-to: bCaptionTitle;
      }
    } @else {
      @error "BUG: Invalid captionType '#{$captionType}'";
    }
  }
  &::after {
    container: div;
    class: "os-caption-container";
    content: pending(bCaption) pending(bCaptionTitle) pending(bCaptionDivider) pending(bCaptionContent);
    move-to: bCaptionContainer;
  }
  @if $captionType == $CAPTION_TABLE {
    @if ($hasTopTitle and not release-flag-enabled(table-move-fake-title)) {
      &.top-titled {
        &::after {
          class: "os-table-title";
          content: string(TopTitleContent);
          move-to: tableTopTitle;
        }
      }
    }
    @if ($hasTopCaption) {
      &.top-captioned {
        &::after {
          class: "os-top-caption";
          content: string(TopCaptionContent);
          move-to: tableTopCaption;
        }
      }
    }
  }
    &::outside {
    @if $captionType == $CAPTION_TABLE {
      class: os-table;
    } @else if $captionType == $CAPTION_FIGURE {
      class: os-figure;
    } @else {
      @error "BUG: Invalid captionType '#{$captionType}'";
    }
    container: div;
    @if $hasTopTitle {
      content: pending(tableTopTitle) content() pending(bCaptionContainer);
    } @else if $hasTopCaption {
      content: pending(tableTopCaption) content() pending(bCaptionContainer);
    } @else {
      content: content() pending(bCaptionContainer);
    }
  }
}

@mixin number_equations ($numberedEquation, $numberAfterEq) {
  [data-type="chapter"], .appendix {
    [data-type="equation"]:not(.unnumbered) {
      @if $numberAfterEq {
        @include utils_title($numberedEquation, equationNum);
        &::after {
          class: os-equation-number;
          container: div;
          content: pending(equationNum)
        }
      } @else {
        @include utils_title($numberedEquation);
      }
    }
  }
}


@mixin number_citations($citationCounter, $citationLinkCounter ) {
  [data-type="cite"] {
    &::before {
      container: sup;
      class: 'os-citation-number';
      content: counter($citationLinkCounter);
    }
    .reference::before {
      container: span;
      class: os-reference-number;
      content: counter($citationCounter) ". ";
    }
  }
}

@mixin number_endNotes($noteCounter, $endNotesLinks) {
  [data-type="cite"] {
    attr-id: #{string(pageID)} "-endNote" counter($endNotesLinks);
    &::inside {
      container: sup;
      class: 'os-end-note-number';
      content: target-counter(attr(href), $noteCounter);
    }
  }
  .references [data-type="note"] a {
    attr-href:"#" #{string(pageID)} "-endNote" counter($noteCounter);
    span{
      content: counter($noteCounter) ".";
    }
  }
}

@mixin number_footnotes($footnoteCounter, $footnoteLinkCounter) {
  a[role="doc-noteref"] {
    content: counter($footnoteLinkCounter);
  }
  aside[role="doc-footnote"]::before {
    data-type: "footnote-number";
    content: counter($footnoteCounter);
  }
}

//mixin for custom numbering footnotes using counter type 
@mixin number_customFootnotes($footnoteCounter, $footnoteLinkCounter, $counterType, $parentSelector: null) {
  $footnoteLinkSelector: '';
  $footnoteSelector: '';
  
  @if $parentSelector != null {
    $footnoteLinkSelector: '#{$parentSelector} a[role="doc-noteref"]';
    $footnoteSelector: '#{$parentSelector} aside[role="doc-footnote"]::before';
  } @else {
    $footnoteLinkSelector: 'a[role="doc-noteref"]';
    $footnoteSelector: 'aside[role="doc-footnote"]::before';
  }
  #{$footnoteLinkSelector} {
    content: counter($footnoteLinkCounter, $counterType);
  }
  #{$footnoteSelector} {
    data-type: "footnote-number";
    content: counter($footnoteCounter, $counterType);
  }
}
